{
	"info": {
		"_postman_id": "62967d7f-dec1-46ea-b460-e2d4e7d323c4",
		"name": "Test Runtime API Operations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Generate Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var accessTokenResponse = pm.response.json();",
							"pm.collectionVariables.set(\"access_token\",accessTokenResponse.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "45f1c5c8-a92e-11ed-afa1-0242ac120002",
							"type": "string"
						},
						{
							"key": "password",
							"value": "4fbd62ec-a92e-11ed-afa1-0242ac120002",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Host",
						"value": "idp.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/oauth2/token",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"oauth2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI List Services",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Services available in k8s cluster\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(1);",
							"});",
							"console.log('Getting all services in namespace and find sample service required for test');",
							"_.each(pm.response.json().list, (serviceEntry) => {",
							"    if(serviceEntry.name === pm.collectionVariables.get('testServiceName')&& serviceEntry.namespace === pm.collectionVariables.get('testServiceNamespace')) {",
							"        pm.collectionVariables.set('serviceUUID', serviceEntry.id)",
							"        console.log(\"HTTP bin service found, serviceUUID is\", serviceEntry.id);",
							"    }",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/services",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"services"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create API from Service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"serviceUUID\",pm.collectionVariables.get('serviceUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAPIName'));",
							"    pm.expect(responseJson.context).equals( pm.collectionVariables.get('testAPIContext'));",
							"    pm.expect(responseJson.version).equals(\"1.0.0\");",
							"    pm.expect(responseJson.type).equals(\"REST\");",
							"    _.each(responseJson.operations, (operations) => {",
							"        if(operations.verb === \"GET\") {",
							"            //verifying operation policy content",
							"            _.each(operations.operationPolicies, (operationPolicies) => {",
							"                _.each(operationPolicies.request, (requestPolicies) => {",
							"                    pm.expect(requestPolicies.policyName).equals(\"addHeader\");",
							"                    _.each(requestPolicies.parameters, (parameters) => {",
							"                        pm.expect(parameters.headerName).equals(\"sampleadd\");",
							"                        pm.expect(parameters.headerValue).equals(\"samplevalue\");",
							"                    })",
							"                })",
							"                _.each(operationPolicies.response, (responsePolicies) => {",
							"                    pm.expect(responsePolicies.policyName).equals(\"removeHeader\");",
							"                    _.each(requestPolicies.parameters, (parameters) => {",
							"                        pm.expect(parameters.headerName).equals(\"access-control-allow-credentials\");",
							"                    })",
							"                })",
							"            })",
							"            //verifying rate limit content",
							"            pm.expect(operations.operationRateLimit.requestsPerUnit).equals(5);",
							"            pm.expect(operations.operationRateLimit.unit).equals(\"Minute\");",
							"        }",
							"    })",
							"    pm.collectionVariables.set(\"APIUUID\",responseJson.id)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					},
					{
						"key": "x-jwt-assertion",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IlpUYzJOV1UyTXprM01XRXhNRE0zWVRjeE1HSTFNVGcxWlRCaVl6YzJNakpoWm1Sak1XWTFaQT09In0.eyJzdWIiOiI0NWYxYzVjOC1hOTJlLTExZWQtYWZhMS0wMjQyYWMxMjAwMDIiLCJjbGllbnRJZCI6IjQ1ZjFjNWM4LWE5MmUtMTFlZC1hZmExLTAyNDJhYzEyMDAwMiIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9udGllciI6IlVubGltaXRlZCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3ZlcnNpb24iOiIxLjAuMCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2tleXR5cGUiOiJQUk9EVUNUSU9OIiwiaXNzIjoid3NvMi5vcmdcL3Byb2R1Y3RzXC9hbSIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9ubmFtZSI6ImFub246IiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvZW5kdXNlclRlbmFudElkIjoiMCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9uVVVJZCI6IjZiMGIxOWZmLWEyODQtMzViYS1iNzYzLWRkMzMwY2VjYWRmZiIsInNjb3BlIjoiZGVmYXVsdCIsImV4cCI6MTY4MDA3Nzk2MSwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvYXBwbGljYXRpb25pZCI6IjZiMGIxOWZmLWEyODQtMzViYS1iNzYzLWRkMzMwY2VjYWRmZiIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3VzZXJ0eXBlIjoiQXBwbGljYXRpb25fVXNlciIsImlhdCI6MTY4MDA3NDM2MSwianRpIjoiZWI5YzRiYmQtM2JiZi00ZmI5LWIzYWYtMzcxNzE1YjM0MTcwIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvYXBpY29udGV4dCI6IlwvYXBpXC9hbVwvcnVudGltZVwvMS4wLjAifQ.o-C4cAZLCiYAI0qTqVmYE-DzRPujo3R3-HSgHRqww4a3MGH8XsbI247z5y2SRlFeLHhRVLiMcYpHdKyAeIW89sJJNlCIAwy3sT86QLUFw1ZiimPJwXnEgbneyvGN2hVBlR9btTy-3he978SkjmuSPWItI1UJKcGBvMs_vo4Rmr5XMxB5mVlVrfo0iNTixWUWI3tLxH0bWVFB_WD3zH3ETnu1QpCtciqKIFNWnW0zOrCKbO3gUJAmM-cIJMGJ_aNlxVGBvfD_u20ldEkZWox-k0mispy5SXw4FPlBuQKGvnh-ccyunI4rL-O_FT_7I5J-A9nax-9VJnimQijZrpvaXQ",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"context\": \"{{testAPIContext}}\",\n    \"name\": \"{{testAPIName}}\",\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/*\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"operationPolicies\": {\n                \"request\": [\n                    {\n                        \"policyName\": \"addHeader\",\n                        \"parameters\": {\n                            \"headerName\": \"sampleadd\",\n                            \"headerValue\": \"samplevalue\"\n                        }\n                    }\n                ],\n                \"response\": [\n                    {\n                        \"policyName\": \"removeHeader\",\n                        \"parameters\": {\n                            \"headerName\": \"access-control-allow-credentials\"\n                        }\n                    }\n                ]\n            },\n            \"operationRateLimit\": {\n                \"requestsPerUnit\": 5,\n                \"unit\": \"Minute\"\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"POST\",\n            \"authTypeEnabled\": true\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/import-service?serviceKey={{serviceUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"import-service"
					],
					"query": [
						{
							"key": "serviceKey",
							"value": "{{serviceUUID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI List APIs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Services available in k8s cluster\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});",
							"",
							"console.log('Getting all APIs in namespace and find sample service required for test');",
							"_.each(pm.response.json().list, (APIEntry) => {",
							"    if(APIEntry.name === pm.collectionVariables.get('testAPIName')) {",
							"    pm.expect(APIEntry.context).equals( pm.collectionVariables.get('testAPIContext'));",
							"    pm.expect(APIEntry.version).equals(\"1.0.0\");",
							"    pm.expect(APIEntry.type).equals(\"REST\");",
							"    console.log(\"API entry found and verified details\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI GET API by ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIUUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "change a one resource",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"APIUUID\",pm.collectionVariables.get('APIUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"_.each(pm.response.json().operations, (operation) => {",
							"    if(operation.target === \"/headers\") {",
							"        pm.expect(operation.verb===\"GET\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					},
					{
						"key": "X-JWT-ASSERTION",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IlpUYzJOV1UyTXprM01XRXhNRE0zWVRjeE1HSTFNVGcxWlRCaVl6YzJNakpoWm1Sak1XWTFaQT09In0.eyJzdWIiOiI0NWYxYzVjOC1hOTJlLTExZWQtYWZhMS0wMjQyYWMxMjAwMDIiLCJjbGllbnRJZCI6IjQ1ZjFjNWM4LWE5MmUtMTFlZC1hZmExLTAyNDJhYzEyMDAwMiIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9udGllciI6IlVubGltaXRlZCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL3ZlcnNpb24iOiIxLjAuMCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2tleXR5cGUiOiJQUk9EVUNUSU9OIiwiaXNzIjoid3NvMi5vcmdcL3Byb2R1Y3RzXC9hbSIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9ubmFtZSI6ImFub246Tm9uIFByb2R1Y3Rpb24gSURQIiwiaHR0cDpcL1wvd3NvMi5vcmdcL2NsYWltc1wvZW5kdXNlclRlbmFudElkIjoiMCIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9uVVVJZCI6IjAyMDYzYmJkLTcyYTQtMzIzOC1hOGY0LTcyNjI1NTM0OWM3YiIsInNjb3BlcyI6ImRlZmF1bHQiLCJleHAiOjE2NzY5NjU1NjIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwcGxpY2F0aW9uaWQiOiIwMjA2M2JiZC03MmE0LTMyMzgtYThmNC03MjYyNTUzNDljN2IiLCJodHRwOlwvXC93c28yLm9yZ1wvY2xhaW1zXC91c2VydHlwZSI6IkFwcGxpY2F0aW9uX1VzZXIiLCJpYXQiOjE2NzY5NjE5NjIsImp0aSI6IjcyZmNkMzVkLTgyNDYtNDY2Yi04Y2JlLTNhM2YyOTdmNjFjMyIsImh0dHA6XC9cL3dzbzIub3JnXC9jbGFpbXNcL2FwaWNvbnRleHQiOiJcL2FwaVwvYW1cL3J1bnRpbWVcLzEuMC4wIn0.EpzZrmtK5U6NVb4qsv2YRrZd_aeJ2A-wcEpjWe1_QUVA86wCC2E76nHUzE5ErNRpQSrDICvtBHbLMEx2bdDRhcphEOwL_AWrd9PKrT2xSLqLj_u-y5fhQiOkRRd-EwT31UJETBaWd6P0jBswx5gWblPfG4lrF4bfB0I0ZQmlNxiA5kEv6z5EnKoBlLA3ot2MeW4R9kE13cC4p3RZ8P76tPiAS2Z-rzOwmFpzDR7-gFWDmre5dqlJEhuAcvJVq7F78dYesF9YEE_-SGRg3d3Xw3QJvI2kE8eiljYExvUKqGgUR4Ft8Y9nv_oj20C3DLhb3k8Qf_i_z-lPKV_YQayBWw",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{APIUUID}}\",\n    \"name\": \"{{testAPIName}}\",\n    \"context\": \"/testAPIV1/1.0.0\",\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"PUT\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"POST\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"DELETE\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"PATCH\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        }\n    ],\n    \"serviceInfo\": {\n        \"name\": \"backend\",\n        \"namespace\": \"default\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIUUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI GET API definition by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var exists = false;",
							"_.each(pm.response.json().paths, (operation) => {",
							"    if(operation[0] === \"/headers\") {",
							"        exist=true;",
							"    }",
							"})",
							"pm.expect(exists===true);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIUUID}}/definition",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIUUID}}",
						"definition"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Delete API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIUUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI GET Deleted API to verify",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"APIUUID\",pm.collectionVariables.get('APIUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checking for 404 for deleted API\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.collectionVariables.set(\"APIUUID\",\"\")",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIUUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create APIV2 for runtime test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAPIV2Name'));",
							"    pm.expect(responseJson.context).equals(pm.collectionVariables.get('testAPIV2Context'));",
							"    pm.expect(responseJson.version).equals(\"1.0.0\");",
							"    pm.expect(responseJson.type).equals(\"REST\");",
							"    pm.collectionVariables.set(\"APIV2UUID\",responseJson.id)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"context\": \"{{testAPIV2Context}}\" ,\n    \"name\": \"{{testAPIV2Name}}\" ,\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\"\n}"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/import-service?serviceKey={{serviceUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"import-service"
					],
					"query": [
						{
							"key": "serviceKey",
							"value": "{{serviceUUID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create APIV4 for Endpoint Security test - Services",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAPIV4Name'));",
							"    pm.expect(responseJson.context).equals(pm.collectionVariables.get('testAPIV4Context'));",
							"    pm.expect(responseJson.version).equals(\"1.0.0\");",
							"    pm.expect(responseJson.type).equals(\"REST\");",
							"    pm.collectionVariables.set(\"APIV4UUID\",responseJson.id)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"context\": \"{{testAPIV4Context}}\" ,\n    \"name\": \"{{testAPIV4Name}}\" ,\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\"\n}"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/import-service?serviceKey={{serviceUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"import-service"
					],
					"query": [
						{
							"key": "serviceKey",
							"value": "{{serviceUUID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create APIV5 for Endpoint Security - Direct Endpoints",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAPIV5Name'));",
							"    pm.expect(responseJson.context).equals(pm.collectionVariables.get('testAPIV5Context'));",
							"    pm.expect(responseJson.version).equals(\"1.0.0\");",
							"    pm.expect(responseJson.type).equals(\"REST\");",
							"    pm.collectionVariables.set(\"APIV5UUID\",responseJson.id)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"testAPIV5\",\n    \"context\": \"/testAPIV5/1.0.0\",\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        }\n    ],\n    \"endpointConfig\": {\n        \"endpoint_type\": \"http\",\n        \"sandbox_endpoints\": {\n            \"url\": \"https://httpbin.org\"\n        },\n        \"production_endpoints\": {\n            \"url\": \"https://httpbin.org\"\n        }\n    }\n}"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI List APIs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"APIs available in k8s cluster\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});",
							"",
							"console.log('Getting all APIs in namespace and find sample service required for test');",
							"_.each(pm.response.json().list, (APIEntry) => {",
							"    if(APIEntry.name === pm.collectionVariables.get('testAPIV2Name')) {",
							"    pm.expect(APIEntry.context).equals(pm.collectionVariables.get('testAPIV2Context'));",
							"    pm.expect(APIEntry.version).equals(\"1.0.0\");",
							"    pm.expect(APIEntry.type).equals(\"REST\");",
							"    console.log(\"API entry found and verified details\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create Access Key for APIV2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert token generation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(parseInt(responseJson.validityTime)).greaterThan(100);",
							"    pm.collectionVariables.set('APITestKey', responseJson.apikey);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"context\": \"/{{testAPIV2Context}}\" ,\n    \"name\": \"{{testAPIV2Name}}\" ,\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\"\n}\n"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV2UUID}}/generate-key",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV2UUID}}",
						"generate-key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Runtime Call careated API using APIKey",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{APITestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}{{testAPIV2Context}}/get",
					"host": [
						"{{gatewayBaseURl}}{{testAPIV2Context}}"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "change one resource api2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"_.each(pm.response.json().operations, (operation) => {",
							"    if(operation.target === \"/headers\") {",
							"        pm.expect(operation.verb===\"GET\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{APIV2UUID}}\",\n    \"name\": \"{{testAPIV2Name}}\",\n    \"context\": \"/testAPIV2/1.0.0\",\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"PUT\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"POST\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"DELETE\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"PATCH\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        }\n    ],\n    \"serviceInfo\": {\n        \"name\": \"{{testServiceName}}\",\n        \"namespace\": \"{{testServiceNamespace}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV2UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV2UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "call newly added resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{APITestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}{{testAPIV2Context}}/headers",
					"host": [
						"{{gatewayBaseURl}}{{testAPIV2Context}}"
					],
					"path": [
						"headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "call previously available resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{APITestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}{{testAPIV2Context}}/get",
					"host": [
						"{{gatewayBaseURl}}{{testAPIV2Context}}"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Copy API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAPIV2Name'));",
							"    pm.expect(responseJson.version).equals(\"2.0.0\");",
							"    pm.expect(responseJson.type).equals(\"REST\");",
							"    pm.collectionVariables.set(\"APIV3UUID\",responseJson.id)",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/copy-api?apiId={{APIV2UUID}}&newVersion=2.0.0",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"copy-api"
					],
					"query": [
						{
							"key": "apiId",
							"value": "{{APIV2UUID}}"
						},
						{
							"key": "newVersion",
							"value": "2.0.0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify resource NEW Version API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// initialize a variable to keep track of whether the target exists",
							"let targetExists = false;",
							"",
							"// loop through the operations array and check if the target exists",
							"for (let i = 0; i < pm.response.json().operations.length; i++) {",
							"    if (pm.response.json().operations[i].target === \"/response-headers\") {",
							"        targetExists = true;",
							"        break;",
							"    }",
							"}",
							"",
							"if (targetExists) {",
							"    pm.test(\"Target exists\", function() {",
							"        pm.expect(targetExists).to.be.true;",
							"    });",
							"} else {",
							"    pm.test(\"Target does not exist\", function() {",
							"        pm.expect(targetExists).to.be.true;",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"e5bd2c03-3d80-48eb-acd7-c6ccad20793f\",\n    \"name\": \"testAPIV2\",\n    \"context\": \"/testAPIV2/2.0.0\",\n    \"version\": \"2.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/response-headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"PUT\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"POST\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"DELETE\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        },\n        {\n            \"target\": \"/*\",\n            \"verb\": \"PATCH\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        }\n    ],\n        \"serviceInfo\": {\n            \"name\": \"backend\",\n            \"namespace\": \"test-apk\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV3UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV3UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI GET API by ID Default Version",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							" //parse the response JSON and test three properties",
							"const responseJson = pm.response.json();",
							"",
							"// initialize a variable to keep track of whether the target exists",
							"let targetNewVersionModifiedAffected = false;",
							"",
							"// loop through the operations array and check if the target exists",
							"for (let i = 0; i < responseJson.operations.length; i++) {",
							"    if (responseJson.operations[i].target === \"/response-headers\") {",
							"        targetExists = true;",
							"        break;",
							"    }",
							"",
							"}",
							"",
							"pm.test(\"Verify default API body after New Version API Modification\", () => {",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAPIV2Name'));",
							"    pm.expect(responseJson.version).equals(\"1.0.0\");",
							"});",
							"",
							"if (!targetNewVersionModifiedAffected) {",
							"    pm.test(\"New version API Change is not affected \", function() {",
							"        pm.expect(targetNewVersionModifiedAffected).to.be.false;",
							"    });",
							"} else {",
							"    pm.test(\"New version API Change is affected to the default veresion\", function() {",
							"        pm.expect(targetNewVersionModifiedAffected).to.be.false;",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV2UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV2UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI retrieve definition of copy api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"context\": \"/{{testAPIV2Context}}\" ,\n    \"name\": \"{{testAPIV2Name}}\" ,\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\"\n}\n"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV3UUID}}/definition",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV3UUID}}",
						"definition"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create Access Key for APIV2 Copy 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert token generation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(parseInt(responseJson.validityTime)).greaterThan(100);",
							"    pm.collectionVariables.set('API2TestKey', responseJson.apikey);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV3UUID}}/generate-key",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV3UUID}}",
						"generate-key"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Invoke new Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{API2TestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/testAPIV2/2.0.0/response-headers",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"testAPIV2",
						"2.0.0",
						"response-headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Delete API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"APIUUID\",pm.collectionVariables.get('APIUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV2UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV2UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Call API after Deleting API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{APITestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}{{testAPIV2Context}}/headers",
					"host": [
						"{{gatewayBaseURl}}{{testAPIV2Context}}"
					],
					"path": [
						"headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Invoke new Version after deleting API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{API2TestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/testAPIV2/2.0.0/response-headers",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"testAPIV2",
						"2.0.0",
						"response-headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Delete NEW Version API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"APIUUID\",pm.collectionVariables.get('APIUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV3UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV3UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Invoke new Version after deleting API Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{API2TestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/testAPIV2/2.0.0/response-headers",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"testAPIV2",
						"2.0.0",
						"response-headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI List Mediation Policies",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Mediation Policies available in Runtime\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/policies",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"policies"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI GET Mediation Policy by ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/policies/{{POLICYID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"policies",
						"{{POLICYID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI List APIs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Services available in k8s cluster\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});",
							"",
							"console.log('Getting all APIs in namespace and find sample service required for test');",
							"_.each(pm.response.json().list, (APIEntry) => {",
							"    if(APIEntry.name === pm.collectionVariables.get('testAPIV4Name')) {",
							"    pm.expect(APIEntry.context).equals( pm.collectionVariables.get('testAPIV4Context'));",
							"    pm.expect(APIEntry.version).equals(\"1.0.0\");",
							"    pm.expect(APIEntry.type).equals(\"REST\");",
							"    console.log(\"API entry found and verified details\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create Access Key for APIV4 - Service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert token generation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(parseInt(responseJson.validityTime)).greaterThan(100);",
							"    pm.collectionVariables.set('APITestKey', responseJson.apikey);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV4UUID}}/generate-key",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV4UUID}}",
						"generate-key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Endpoint Security for API4 - Service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{APIV4UUID}}\",\n    \"name\": \"testAPIV4\",\n    \"context\": \"/testAPIV4/1.0.0\",\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        }\n    ],\n    \"serviceInfo\": {\n        \"name\": \"{{testServiceName}}\",\n        \"namespace\": \"{{testServiceNamespace}}\",\n        \"endpoint_security\": {\n            \"production\": {\n                \"enabled\": true,\n                \"type\": \"Basic\",\n                \"username\": \"admin\",\n                \"password\": \"admin\"\n            }\n        }\n\n    }\n}"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV4UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV4UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "call service resource with Endpoint security - Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should have Authorization property\", function () {",
							"    var jsonData = pm.response.json().headers;",
							"    pm.expect(jsonData).to.have.property(\"Authorization\");",
							"});",
							"",
							"pm.test(\"Assert Authorization header content\", () => {",
							"    //parse the response JSON and test Basic auth header",
							"    const responseJson = pm.response.json().headers;",
							"    pm.expect(responseJson.Authorization).equals(\"Basic YWRtaW46YWRtaW4=\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{APITestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}{{testAPIV4Context}}/headers",
					"host": [
						"{{gatewayBaseURl}}{{testAPIV4Context}}"
					],
					"path": [
						"headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Endpoint Security - Service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"_.each(pm.response.json().operations, (operation) => {",
							"    if(operation.target === \"/headers\") {",
							"        pm.expect(operation.verb===\"GET\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{APIV4UUID}}\",\n    \"name\": \"testAPIV4\",\n    \"context\": \"/testAPIV4/1.0.0\",\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        }\n    ],\n    \"serviceInfo\": {\n        \"name\": \"{{testServiceName}}\",\n        \"namespace\": \"{{testServiceNamespace}}\",\n        \"endpoint_security\": {\n            \"production\": {\n                \"enabled\": true,\n                \"type\": \"Basic\",\n                \"username\": \"admin123\",\n                \"password\": \"admin123\"\n            }\n        }\n\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV4UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV4UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "call service resource with Updated Endpoint security - Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should have Authorization property\", function () {",
							"    var jsonData = pm.response.json().headers;",
							"    pm.expect(jsonData).to.have.property(\"Authorization\");",
							"});",
							"",
							"pm.test(\"Assert Authorization header content\", () => {",
							"    //parse the response JSON and test Basic auth header",
							"    const responseJson = pm.response.json().headers;",
							"    pm.expect(responseJson.Authorization).equals(\"Basic YWRtaW4xMjM6YWRtaW4xMjM=\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{APITestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}{{testAPIV4Context}}/headers",
					"host": [
						"{{gatewayBaseURl}}{{testAPIV4Context}}"
					],
					"path": [
						"headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Delete Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"APIUUID\",pm.collectionVariables.get('APIUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV4UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV4UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI List APIs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Services available in k8s cluster\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});",
							"",
							"console.log('Getting all APIs in namespace and find sample service required for test');",
							"_.each(pm.response.json().list, (APIEntry) => {",
							"    if(APIEntry.name === pm.collectionVariables.get('testAPIV4Name')) {",
							"    pm.expect(APIEntry.context).equals( pm.collectionVariables.get('testAPIV4Context'));",
							"    pm.expect(APIEntry.version).equals(\"1.0.0\");",
							"    pm.expect(APIEntry.type).equals(\"REST\");",
							"    console.log(\"API entry found and verified details\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create Access Key for APIV5 - Endpoint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert token generation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(parseInt(responseJson.validityTime)).greaterThan(100);",
							"    pm.collectionVariables.set('APITestKey', responseJson.apikey);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV5UUID}}/generate-key",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV5UUID}}",
						"generate-key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Endpoint Security for API5 - Direct Endpoints",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{APIV5UUID}}\",\n    \"name\": \"testAPIV5\",\n    \"context\": \"/testAPIV5/1.0.0\",\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        }\n    ],\n    \"endpointConfig\": {\n        \"endpoint_type\": \"http\",\n        \"sandbox_endpoints\": {\n            \"url\": \"https://httpbin.org\"\n        },\n        \"production_endpoints\": {\n            \"url\": \"https://httpbin.org\"\n        },\n        \"endpoint_security\": {\n            \"production\": {\n                \"enabled\": true,\n                \"type\": \"Basic\",\n                \"username\": \"admin\",\n                \"password\": \"admin\"\n            },\n            \"sandbox\": {\n                \"enabled\": false,\n                \"type\": \"Basic\",\n                \"username\": \"admin1\",\n                \"password\": \"admin1\"\n            }\n        }\n    }\n}"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV5UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV5UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "call service resource with Endpoint security - Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should have Authorization property\", function () {",
							"    var jsonData = pm.response.json().headers;",
							"    pm.expect(jsonData).to.have.property(\"Authorization\");",
							"});",
							"",
							"pm.test(\"Assert Authorization header content\", () => {",
							"    //parse the response JSON and test Basic auth header",
							"    const responseJson = pm.response.json().headers;",
							"    pm.expect(responseJson.Authorization).equals(\"Basic YWRtaW46YWRtaW4=\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{APITestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}{{testAPIV5Context}}/headers",
					"host": [
						"{{gatewayBaseURl}}{{testAPIV5Context}}"
					],
					"path": [
						"headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Endpoint Security - Endpoint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"_.each(pm.response.json().operations, (operation) => {",
							"    if(operation.target === \"/headers\") {",
							"        pm.expect(operation.verb===\"GET\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{APIV5UUID}}\",\n    \"name\": \"testAPIV5\",\n    \"context\": \"/testAPIV5/1.0.0\",\n    \"version\": \"1.0.0\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"scopes\": [],\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": []\n            }\n        }\n    ],\n    \"endpointConfig\": {\n        \"endpoint_type\": \"http\",\n        \"sandbox_endpoints\": {\n            \"url\": \"https://httpbin.org\"\n        },\n        \"production_endpoints\": {\n            \"url\": \"https://httpbin.org\"\n        },\n        \"endpoint_security\": {\n            \"production\": {\n                \"enabled\": true,\n                \"type\": \"Basic\",\n                \"username\": \"admin123\",\n                \"password\": \"admin123\"\n            },\n            \"sandbox\": {\n                \"enabled\": false,\n                \"type\": \"Basic\",\n                \"username\": \"admin1\",\n                \"password\": \"admin1\"\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV5UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV5UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "call service resource with Updated Endpoint security - Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check API response and status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should have Authorization property\", function () {",
							"    var jsonData = pm.response.json().headers;",
							"    pm.expect(jsonData).to.have.property(\"Authorization\");",
							"});",
							"",
							"pm.test(\"Assert Authorization header content\", () => {",
							"    //parse the response JSON and test Basic auth header",
							"    const responseJson = pm.response.json().headers;",
							"    pm.expect(responseJson.Authorization).equals(\"Basic YWRtaW4xMjM6YWRtaW4xMjM=\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "HOST",
						"value": "a3b58ccf-6ecc-4557-b5bb-0a35cce38256.gw.wso2.com",
						"type": "text"
					},
					{
						"key": "Internal-Key",
						"value": "{{APITestKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/testAPIV5/1.0.0/headers",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"testAPIV5",
						"1.0.0",
						"headers"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Delete Endpoint API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"APIUUID\",pm.collectionVariables.get('APIUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{APIV5UUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{APIV5UUID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "serviceUUID",
			"value": ""
		},
		{
			"key": "APIUUID",
			"value": ""
		},
		{
			"key": "testAPIName",
			"value": "testAPIV1",
			"type": "string"
		},
		{
			"key": "testAPIContext",
			"value": "/testAPIV1/1.0.0",
			"type": "string"
		},
		{
			"key": "testServiceName",
			"value": "backend",
			"type": "string"
		},
		{
			"key": "testAPIV2Name",
			"value": "testAPIV2",
			"type": "string"
		},
		{
			"key": "testAPIV2Context",
			"value": "/testAPIV2/1.0.0",
			"type": "string"
		},
		{
			"key": "APITestKey",
			"value": ""
		},
		{
			"key": "APIV2UUID",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "APIV3UUID",
			"value": ""
		},
		{
			"key": "API2TestKey",
			"value": ""
		},
		{
			"key": "testServiceNamespace",
			"value": "test-apk",
			"type": "default"
		},
		{
			"key": "POLICYID",
			"value": "1"
		},
		{
			"key": "APIV4UUID",
			"value": ""
		},
		{
			"key": "testAPIV4Name",
			"value": "testAPIV4",
			"type": "string"
		},
		{
			"key": "testAPIV4Context",
			"value": "/testAPIV4/1.0.0",
			"type": "string"
		},
		{
			"key": "APIV5UUID",
			"value": "",
			"type": "string"
		},
		{
			"key": "testAPIV5Name",
			"value": "testAPIV5",
			"type": "string"
		},
		{
			"key": "testAPIV5Context",
			"value": "/testAPIV5/1.0.0",
			"type": "string"
		}
	]
}