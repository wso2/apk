{
	"info": {
		"_postman_id": "926725e8-8db5-4cd9-9f89-fab60c0d2e2c",
		"name": "APK-Devportal API Operations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Generate Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var accessTokenResponse = pm.response.json();",
							"pm.collectionVariables.set(\"access_token\",accessTokenResponse.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{client_secret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{client_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Host",
						"value": "idp.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/oauth2/token",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"oauth2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"pm.collectionVariables.set(\"runtimeAPIUUID\",responseJson.id);",
							"",
							"pm.test(\"Assert API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAPIName'));",
							"    pm.expect(responseJson.context).equals( pm.collectionVariables.get('testAPIContext')+\"/\"+pm.collectionVariables.get('testAPIVersion'));",
							"    pm.expect(responseJson.version).equals(pm.collectionVariables.get('testAPIVersion'));",
							"    pm.expect(responseJson.type).equals(\"REST\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"context\": \"{{testAPIContext}}\",\n    \"name\": \"{{testAPIName}}\",\n    \"version\": \"{{testAPIVersion}}\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/get\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"endpointConfig\": {\n                \"endpoint_type\": \"http\",\n                \"production_endpoints\": {\n                    \"url\": \"http://httpbin.org\"\n                }\n            }\n        },\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"endpointConfig\": {\n                \"endpoint_type\": \"http\",\n                \"production_endpoints\": {\n                    \"url\": \"http://httpbin.org\"\n                }\n            }\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Backoffice List APIs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check API list via backoffice APIs get call\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.equal(1);",
							"    const api1 = responseJson.list[0];",
							"    pm.expect(api1.name).equals(pm.collectionVariables.get('testAPIName'));",
							"    pm.collectionVariables.set(\"backOfficeApiUUID\",api1.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/backoffice/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"backoffice",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI List APIs before change lifecycle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"APIs available via control plane's devPortal API\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).equals(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "BackOffice Change API LifeCycle State",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert BackOffice API to change lifecycle state \", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.State).equals(pm.collectionVariables.get('lifeCycleStatusTest2'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/backoffice/apis/change-lifecycle?apiId={{backOfficeApiUUID}}&targetState={{lifeCycleStatusTest2}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"backoffice",
						"apis",
						"change-lifecycle"
					],
					"query": [
						{
							"key": "apiId",
							"value": "{{backOfficeApiUUID}}"
						},
						{
							"key": "targetState",
							"value": "{{lifeCycleStatusTest2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI List APIs after publishing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"APIs available via control plane's devPortal API\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});",
							"console.log('Getting all devPortal APIs in control plane and find sample service required for test');",
							"_.each(pm.response.json().list, (APIEntry) => {",
							"    if(APIEntry.name === pm.collectionVariables.get('testAPIName')) {",
							"        pm.environment.set('testAPIID', APIEntry.id)",
							"        pm.collectionVariables.set('testAPIID', APIEntry.id)",
							"        pm.expect(APIEntry.id).equals(pm.collectionVariables.get('backOfficeApiUUID'));",
							"        console.log(\"HTTP bin API found via portal API, ID is\", APIEntry.id);",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI Search APIs by Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"APIs available via control plane's devPortal API\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI GET API By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"APIs available via control plane's devPortal API\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"        pm.expect(responseJson.version).equals(pm.collectionVariables.get('testAPIVersion'));",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/apis/{{backOfficeApiUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"apis",
						"{{backOfficeApiUUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI GET API Definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/apis/{{backOfficeApiUUID}}/definition",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"apis",
						"{{backOfficeApiUUID}}",
						"definition"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI GET SDK Languages",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/sdk-gen/languages",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"sdk-gen",
						"languages"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI Generate SDK Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/apis/{{backOfficeApiUUID}}/sdks/java",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"apis",
						"{{backOfficeApiUUID}}",
						"sdks",
						"java"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Create Application Rate Plan Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert Internal BackOffice API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    //Usually come as false and need to assert in future",
							"    //pm.expect(responseJson.isDeployed).equals(pm.collectionVariables.get('idTest1'));",
							"    pm.expect(responseJson.description).equals(pm.collectionVariables.get('applicationRatePlanDescription'));",
							"    pm.expect(responseJson.displayName).equals(pm.collectionVariables.get('applicationRatePlanDisplayName'));",
							"    pm.expect(responseJson.planName).equals(pm.collectionVariables.get('applicationRatePlanName'));",
							"    //ID is autogenerated hence skipped asseting",
							"    // pm.expect(responseJson.policyId).equals(pm.collectionVariables.get('contextTest1'));",
							"    pm.collectionVariables.set(\"applicationRatePlanID\",responseJson.planId)",
							"",
							"    pm.expect(responseJson.defaultLimit.type).equals(pm.collectionVariables.get('applicationRatePlanType'));",
							"    pm.expect(responseJson.defaultLimit.requestCount.requestCount).to.eql(parseInt(pm.collectionVariables.get('applicationRatePlanRequestCount')));",
							"    pm.expect(responseJson.defaultLimit.requestCount.timeUnit).equals(pm.collectionVariables.get('applicationRatePlanTimeUnit'));",
							"    pm.expect(responseJson.defaultLimit.requestCount.unitTime).equals(parseInt(pm.collectionVariables.get('applicationRatePlanTime')));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"planName\": \"{{applicationRatePlanName}}\",\n  \"displayName\": \"{{applicationRatePlanDisplayName}}\",\n  \"description\": \"{{applicationRatePlanDescription}}\",\n  \"defaultLimit\": {\n    \"type\": \"{{applicationRatePlanType}}\",\n    \"requestCount\": {\n      \"requestCount\": {{applicationRatePlanRequestCount}},\n      \"timeUnit\": \"{{applicationRatePlanTimeUnit}}\",\n      \"unitTime\": {{applicationRatePlanTime}}\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/admin/application-rate-plans",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"application-rate-plans"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI Application Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert Internal BackOffice API creation response\", () => {",
							"    const responseJson = pm.response.json();",
							"    ",
							"    pm.collectionVariables.set(\"testApplicationID\",responseJson.applicationId)",
							"",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAppName'));",
							"    pm.expect(responseJson.throttlingPolicy).equals(pm.collectionVariables.get('testAppThrottlingPolicy'));",
							"    pm.expect(responseJson.description).equals(pm.collectionVariables.get('testAppDescription'));",
							"    pm.expect(responseJson.tokenType).equals(pm.collectionVariables.get('testAppTokenType'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{testAppName}}\",\n  \"throttlingPolicy\": \"{{testAppThrottlingPolicy}}\",\n  \"description\": \"{{testAppDescription}}\",\n  \"tokenType\": \"{{testAppTokenType}}\",\n  \"groups\": [],\n  \"attributes\": {}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/applications",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI Application GET By ID",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/applications/{{testApplicationID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"applications",
						"{{testApplicationID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI Application Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert Internal BackOffice API creation response\", () => {",
							"    const responseJson = pm.response.json();",
							"    ",
							"    pm.collectionVariables.set(\"testApplicationID\",responseJson.applicationId)",
							"",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('testAppName'));",
							"    pm.expect(responseJson.throttlingPolicy).equals(pm.collectionVariables.get('testAppThrottlingPolicy'));",
							"    pm.expect(responseJson.description).equals(pm.collectionVariables.get('testAppDescription2'));",
							"    pm.expect(responseJson.tokenType).equals(pm.collectionVariables.get('testAppTokenType'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{testAppName}}\",\n  \"throttlingPolicy\": \"{{testAppThrottlingPolicy}}\",\n  \"description\": \"{{testAppDescription2}}\",\n  \"tokenType\": \"{{testAppTokenType}}\",\n  \"groups\": [],\n  \"attributes\": {}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/applications/{{testApplicationID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"applications",
						"{{testApplicationID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI List Application",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/applications",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI Application Delete",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/applications/{{testApplicationID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"applications",
						"{{testApplicationID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DevportalAPI Application GET By ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/devportal/applications/{{testApplicationID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"devportal",
						"applications",
						"{{testApplicationID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Application Rate Plan Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/admin/application-rate-plans/{{applicationRatePlanID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"application-rate-plans",
						"{{applicationRatePlanID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Application Rate Plan get after delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/admin/application-rate-plans/{{applicationRatePlanID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"application-rate-plans",
						"{{applicationRatePlanID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Delete API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"runtimeAPIUUID\",pm.collectionVariables.get('runtimeAPIUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{runtimeAPIUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{runtimeAPIUUID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "applicationRatePlanName",
			"value": "95PerMinPlan",
			"type": "string"
		},
		{
			"key": "applicationRatePlanDisplayName",
			"value": "95 Requests per Minutes",
			"type": "string"
		},
		{
			"key": "applicationRatePlanDescription",
			"value": "95 Requests per Minutes",
			"type": "string"
		},
		{
			"key": "applicationRatePlanType",
			"value": "ApplicationThrottlePolicy",
			"type": "string"
		},
		{
			"key": "applicationRatePlanRequestCount",
			"value": "95",
			"type": "string"
		},
		{
			"key": "applicationRatePlanTimeUnit",
			"value": "min",
			"type": "string"
		},
		{
			"key": "applicationRatePlanTime",
			"value": "1",
			"type": "string"
		},
		{
			"key": "applicationRatePlanID",
			"value": "",
			"type": "string"
		},
		{
			"key": "testAPIName",
			"value": "http-bin-api",
			"type": "string"
		},
		{
			"key": "testAPIID",
			"value": ""
		},
		{
			"key": "testAPIContext",
			"value": "/http-bin-api",
			"type": "string"
		},
		{
			"key": "testAPIVersion",
			"value": "1.0.8",
			"type": "string"
		},
		{
			"key": "testAppName",
			"value": "95PerMinPlan",
			"type": "string"
		},
		{
			"key": "testAppThrottlingPolicy",
			"value": "95PerMinPlan",
			"type": "string"
		},
		{
			"key": "testAppDescription",
			"value": "test desc 50",
			"type": "string"
		},
		{
			"key": "testAppTokenType",
			"value": "JWT",
			"type": "string"
		},
		{
			"key": "testAppDescription2",
			"value": "updated test desc 50",
			"type": "string"
		},
		{
			"key": "testApplicationID",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "runtimeAPIUUID",
			"value": ""
		},
		{
			"key": "backOfficeApiUUID",
			"value": ""
		},
		{
			"key": "lifeCycleStatusTest2",
			"value": "Published",
			"type": "default"
		}
	]
}