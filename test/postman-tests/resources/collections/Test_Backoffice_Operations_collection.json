{
	"info": {
		"_postman_id": "eb79c9c8-3b08-4301-992e-ef7496f9d870",
		"name": "Test Backoffice Operations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Generate Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var accessTokenResponse = pm.response.json();",
							"pm.collectionVariables.set(\"access_token\",accessTokenResponse.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{client_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{client_secret}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Host",
						"value": "idp.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/oauth2/token",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"oauth2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Create API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.name).equals(pm.collectionVariables.get('APINameTest1'));",
							"    pm.expect(responseJson.context).equals( pm.collectionVariables.get('contextTest1')+\"/1.0.0\");",
							"    pm.expect(responseJson.version).equals(\"1.0.0\");",
							"    pm.expect(responseJson.type).equals(\"REST\");",
							"    pm.collectionVariables.set(\"runtimeAPIUUID\",responseJson.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"context\": \"{{contextTest1}}\",\n    \"name\": \"{{APINameTest1}}\",\n    \"version\": \"{{versionTest1}}\",\n    \"type\": \"REST\",\n    \"operations\": [\n        {\n            \"target\": \"/get\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"endpointConfig\": {\n                \"endpoint_type\": \"http\",\n                \"production_endpoints\": {\n                    \"url\": \"http://httpbin.org\"\n                }\n            }\n        },\n        {\n            \"target\": \"/headers\",\n            \"verb\": \"GET\",\n            \"authTypeEnabled\": true,\n            \"endpointConfig\": {\n                \"endpoint_type\": \"http\",\n                \"production_endpoints\": {\n                    \"url\": \"http://httpbin.org\"\n                }\n            }\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Backoffice List APIs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check API list via backoffice APIs get call\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.equal(1);",
							"    const api1 = responseJson.list[0];",
							"    pm.expect(api1.name).equals(pm.collectionVariables.get('APINameTest1'));",
							"    pm.collectionVariables.set(\"backOfficeApiUUID\",api1.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/backoffice/apis",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"backoffice",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "BackOffice Change API LifeCycle State",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert BackOffice API to change lifecycle state \", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.State).equals(pm.collectionVariables.get('lifeCycleStatusTest2'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/backoffice/apis/change-lifecycle?apiId={{backOfficeApiUUID}}&targetState={{lifeCycleStatusTest2}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"backoffice",
						"apis",
						"change-lifecycle"
					],
					"query": [
						{
							"key": "apiId",
							"value": "{{backOfficeApiUUID}}"
						},
						{
							"key": "targetState",
							"value": "{{lifeCycleStatusTest2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BackOffice Get API Current LifeCycle State",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert Backoffice API to get lifecycle state of given API\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.State).equals(pm.collectionVariables.get('lifeCycleStatusTest2'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/backoffice/apis/{{backOfficeApiUUID}}/lifecycle-state",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"backoffice",
						"apis",
						"{{backOfficeApiUUID}}",
						"lifecycle-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "BackOffice Get life Cycle History",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check lifecycle change event count is greater than 0\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});",
							"pm.test(\"Assert Backoffice API to get lifecycle state of given API\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    //pm.expect(responseJson.Count.).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/backoffice/apis/{{backOfficeApiUUID}}/lifecycle-history",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"backoffice",
						"apis",
						"{{backOfficeApiUUID}}",
						"lifecycle-history"
					]
				}
			},
			"response": []
		},
		{
			"name": "RuntimeAPI Delete API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"runtimeAPIUUID\",pm.collectionVariables.get('runtimeAPIUUID'))",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Host",
						"value": "api.am.wso2.com",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{gatewayBaseURl}}/api/am/runtime/apis/{{runtimeAPIUUID}}",
					"host": [
						"{{gatewayBaseURl}}"
					],
					"path": [
						"api",
						"am",
						"runtime",
						"apis",
						"{{runtimeAPIUUID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APINameTest1",
			"value": "PizzaShask",
			"type": "string"
		},
		{
			"key": "contextTest1",
			"value": "/pizzashack",
			"type": "string"
		},
		{
			"key": "versionTest1",
			"value": "1.0.0",
			"type": "string"
		},
		{
			"key": "providerTest1",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "lifeCycleStatusTest1",
			"value": "CREATED",
			"type": "string"
		},
		{
			"key": "typeTest1",
			"value": "HTTP",
			"type": "string"
		},
		{
			"key": "visibilityTest1",
			"value": "PUBLIC",
			"type": "string"
		},
		{
			"key": "subscriptionAvailabilityTest1",
			"value": "All",
			"type": "string"
		},
		{
			"key": "accessControlTest1",
			"value": "NONE",
			"type": "string"
		},
		{
			"key": "endpointImplementationTypeTest1",
			"value": "ENDPOINT",
			"type": "string"
		},
		{
			"key": "idTest1",
			"value": "01ed75e2-b30b-18c8-wwf2-25da7edd2231",
			"type": "string"
		},
		{
			"key": "APINameTest2",
			"value": "NewPizzaAPI",
			"type": "string"
		},
		{
			"key": "contextTest2",
			"value": "new-pizzacontext",
			"type": "string"
		},
		{
			"key": "lifeCycleStatusTest2",
			"value": "Published",
			"type": "string"
		},
		{
			"key": "endpointImplementationTypeTest2",
			"value": "ENDPOINT",
			"type": "string"
		},
		{
			"key": "visibilityTest2",
			"value": "PRIVATE",
			"type": "string"
		},
		{
			"key": "versionTest2",
			"value": "2.0.0",
			"type": "string"
		},
		{
			"key": "providerTest2",
			"value": "provider",
			"type": "string"
		},
		{
			"key": "typeTest2",
			"value": "REST",
			"type": "string"
		},
		{
			"key": "subscriptionAvailabilityTest2",
			"value": "ALL",
			"type": "string"
		},
		{
			"key": "accessControlTest2",
			"value": "NONE",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "backOfficeApiUUID",
			"value": ""
		},
		{
			"key": "runtimeAPIUUID",
			"value": ""
		}
	]
}