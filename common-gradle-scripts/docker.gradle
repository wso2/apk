/*
 * Copyright (c) 2022, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 *
 */

def imageName = docker_image_name + ':' + project.version
if (project.hasProperty("image_version")){
imageName = docker_image_name + ':' + image_version
}
if (project.hasProperty("docker_organization")) {
    imageName = docker_organization+'/'+imageName
}
def platforms = 'linux/amd64,linux/arm64'



tasks.register('docker_login', Exec) {
    group 'docker'
    description 'Log in to a Docker registry.'
    if (project.hasProperty("docker_username")&& project.hasProperty("docker_password")) {
        println 'Log in to a Docker registry.'
        commandLine 'docker', 'login', '--username', docker_username, '--password', docker_password
    }else{
        println 'Docker username and password are not provided.'
        commandLine 'echo', 'Docker username and password are not provided. or docker login done externally.'
    }
}

tasks.register('docker_build', Exec) {
    group 'docker'
    description 'Build an image from a Dockerfile.'
    def osName = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)
    if (osName.contains("mac")){
        commandLine 'docker', 'build', '--build-arg', 'TARGETARCH=arm64','-t', imageName, '.'
    }else{
        commandLine 'docker', 'build', '--build-arg', 'TARGETARCH=amd64','-t', imageName, '.'
    }
}

tasks.register('docker_push', Exec) {
    group 'docker'
    description 'Push an image or a repository to a registry.'
    if(project.hasProperty("multiArch")){
        dependsOn 'docker_login'
        dependsOn 'docker_buildx'
        commandLine 'echo', 'Image',imageName,' pushed to the docker registry.'
    }else{
        dependsOn docker_login
        dependsOn docker_build

        commandLine 'docker', 'push', imageName
    }
}

// Following tasks are required only if you need to make multi architecture docker images
tasks.register('setup_arch', Exec) {
    group 'docker'
    description 'Setup QEMU for buildx'
    commandLine 'docker', 'run', '--rm', '--privileged', 'multiarch/qemu-user-static', '--reset', '-p', 'yes'
}

tasks.register('setup_buildx', Exec) {
    group 'docker'
    description 'Setup builder instance'
    dependsOn setup_arch
    commandLine 'docker', 'buildx', 'create', '--name', 'mybuilder', '--use'
}

tasks.register('start_builder', Exec) {
    group 'docker'
    description 'Bootstrap buildx builder'
    dependsOn setup_buildx
    commandLine 'docker', 'buildx', 'inspect', '--bootstrap'
}
tasks.register('stop_builder', Exec) {
    group 'docker'
    description 'Bootstrap buildx builder'
    commandLine 'docker', 'buildx', 'stop', 'mybuilder'
    commandLine 'docker', 'buildx', 'rm', 'mybuilder'
}
tasks.register('docker_buildx', Exec) {
    group 'docker'
    description 'Build a multiarch image using docker buildx buildkit'
    dependsOn start_builder
    finalizedBy stop_builder
    mustRunAfter docker_login
    commandLine 'docker', 'buildx', 'build', '--platform', platforms, '-t', imageName, '--push', '.'
}

tasks.register('build_postgres_image', Exec) {
    group 'docker'
    description 'Pull postgres docker image'
    commandLine 'docker', 'build', '-t', 'test-postgres-db',"$rootDir/../../database/postgres/"
}

tasks.register('start_postgres_image', Exec) {
    group 'docker'
    description 'Start postgres docker container'
    dependsOn build_postgres_image
    commandLine 'docker', 'run','--rm', '-itd', '-e', 'POSTGRES_USER=wso2carbon', '-e', 'POSTGRES_PASSWORD=wso2carbon',
            '-p', '10320:5432','--name','postgresql_test','test-postgres-db'
}
tasks.register('stop_postgres_image', Exec) {
    group 'docker'
    description 'Start postgres docker container'
    commandLine 'docker', 'stop', 'postgresql_test'
}
