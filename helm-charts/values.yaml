# Copyright (c) 2022, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
#
# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.

wso2:
  apk:
    auth:
      enabled: true
      serviceAccountName: wso2apk-platform
      roleName: wso2apk-role
    cp:
      enabled: true
      database:
        enabled: true
        driver: "org.postgresql.Driver"
        url: "jdbc:postgresql://wso2apk-db-service:5432/WSO2AM_DB"
        username: "wso2carbon"
        password: "wso2carbon"
        validationQuery: "SELECT 1"
        validationTimeout: 250
      ipk:
        enabled: false
      devportal:
        appName: "devportal-ds"
        deployment:
          npi: devportal-ds-npi
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "1028Mi"
              cpu: "1000m"
          readinessProbe:
            path: /health
            port: 9443
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          livenessProbe:
            path: /health
            port: 9443
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          strategy: Recreate
          replicas: 1
          imagePullPolicy: IfNotPresent
          image: devportal_service:0.1.0-SNAPSHOT
        ingress:
          path: /api/am/devportal
          className: ""
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/affinity: "cookie"
            nginx.ingress.kubernetes.io/session-cookie-name: "route"
            nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      admin:
        appName: "admin-ds"
        deployment:
          npi: admin-ds-npi
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "1028Mi"
              cpu: "1000m"
          readinessProbe:
            path: /health
            port: 9443
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          livenessProbe:
            path: /health
            port: 9443
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          strategy: Recreate
          replicas: 1
          imagePullPolicy: IfNotPresent
          # TODO update image
          image: admin-service:0.1.0-SNAPSHOT
        ingress:
          path: /api/am/admin
          className: ""
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/affinity: "cookie"
            nginx.ingress.kubernetes.io/session-cookie-name: "route"
            nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      publisher:
        appName: "publisher-ds"
        deployment:
          npi: publisher-ds-npi
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "1028Mi"
              cpu: "1000m"
          readinessProbe:
            path: /health
            port: 9443
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          livenessProbe:
            path: /health
            port: 9443
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          strategy: Recreate
          replicas: 1
          imagePullPolicy: IfNotPresent
          image: backoffice_service:0.1.0-SNAPSHOT
        ingress:
          path: /api/am/backoffice
          className: ""
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/affinity: "cookie"
            nginx.ingress.kubernetes.io/session-cookie-name: "route"
            nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      devportalUI:
        appName: "devportal-ui"
        deployment:
          npi: devportal-ui-npi
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "1028Mi"
              cpu: "1000m"
          readinessProbe:
            path: /
            port: 8080
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          livenessProbe:
            path: /
            port: 8080
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          strategy: Recreate
          replicas: 0
          imagePullPolicy: IfNotPresent
          # TODO update image
          image: chanaka3d/portals:linux1.0.0
        ingress:
          path: /
          host: portal.ui.wso2
          className: ""
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
            nginx.ingress.kubernetes.io/affinity: "cookie"
            nginx.ingress.kubernetes.io/session-cookie-name: "route"
            nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      managementServer:
        appName: "management-server"
        deployment:
          npi: management-server-npi
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "1028Mi"
              cpu: "1000m"
          strategy: Recreate
          replicas: 1
          imagePullPolicy: IfNotPresent
          image: management-server:0.0.1-SNAPSHOT
      cnpg:
        npi: cnpg-npi
        instances: 1
        clusterName: cluster-example
        appUserPassword: password
        superUserPassword: password
    dp:
      enabled: true
      runtime:
        appName: "runtime-ds"
        deployment:
          npi: runtime-ds-npi
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "1028Mi"
              cpu: "1000m"
          readinessProbe:
            path: /health
            port: 9443
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          livenessProbe:
            path: /health
            port: 9443
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 5
          strategy: Recreate
          replicas: 1
          imagePullPolicy: IfNotPresent
          image: runtime-api:0.0.1-SNAPSHOT
        ingress:
          path: /api/am/runtime
          className: ""
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/affinity: "cookie"
            nginx.ingress.kubernetes.io/session-cookie-name: "route"
            nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      cc:
        adapter:
          appName: "cc-adapter"
          deployment:
            npi: cc-adapter-npi
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "1028Mi"
                cpu: "1000m"
            env:
              ADAPTER_PRIVATE_KEY_PATH: /home/wso2/security/keystore/mg.key
              ADAPTER_PUBLIC_CERT_PATH: /home/wso2/security/keystore/mg.pem
              cp_admin_pwd: admin
              adapter_admin_pwd: admin
            readinessProbe:
              path: /api/am/devportal/v2/apis?limit=2&offset=2
              port: 9443
              initialDelaySeconds: 20
              periodSeconds: 20
              failureThreshold: 5
            livenessProbe:
              path: /api/am/devportal/v2/apis?limit=2&offset=2
              port: 9443
              initialDelaySeconds: 20
              periodSeconds: 20
              failureThreshold: 5
            strategy: Recreate
            replicas: 1
            imagePullPolicy: IfNotPresent
            image: adapter:0.0.1-SNAPSHOT
            security:
              sslHostname: "adapter"
        gatewayRuntime:
          appName: "cc-router"
          deployment:
            replicas: 1
            router:
              npi: cc-router-npi
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "1028Mi"
                  cpu: "1000m"
              env:
                ROUTER_ADMIN_HOST: 0.0.0.0
                ROUTER_ADMIN_PORT: "9000"
                ROUTER_CLUSTER: default_cluster
                ROUTER_LABEL: Default
                ROUTER_PRIVATE_KEY_PATH: /home/wso2/security/keystore/mg.key
                ROUTER_PUBLIC_CERT_PATH: /home/wso2/security/keystore/mg.pem
                ADAPTER_PORT: "18000"
                ADAPTER_CA_CERT_PATH: /home/wso2/security/truststore/mg.pem
                ENFORCER_PORT: "8081"
                ENFORCER_ANALYTICS_RECEIVER_PORT: "18090"
                ENFORCER_CA_CERT_PATH: /home/wso2/security/truststore/mg.pem
                CONCURRENCY: 2
              readinessProbe:
                path: /api/am/devportal/v2/apis?limit=2&offset=2
                port: 9443
                initialDelaySeconds: 20
                periodSeconds: 20
                failureThreshold: 5
              livenessProbe:
                path: /api/am/devportal/v2/apis?limit=2&offset=2
                port: 9443
                initialDelaySeconds: 20
                periodSeconds: 20
                failureThreshold: 5
              strategy: Recreate
              imagePullPolicy: IfNotPresent
              image: wso2/choreo-connect-router:1.1.0
            enforcer:
              npi: cc-enforcer-npi
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "1028Mi"
                  cpu: "1000m"
              env:
                ENFORCER_PRIVATE_KEY_PATH: /home/wso2/security/keystore/mg.key
                ENFORCER_PUBLIC_CERT_PATH: /home/wso2/security/keystore/mg.pem
                TRUSTED_CA_CERTS_PATH: /home/wso2/security/truststore
                ADAPTER_XDS_PORT: "18000"
                ENFORCER_LABEL: Default
                ENFORCER_REGION: UNKNOWN
                XDS_MAX_MSG_SIZE: "4194304"
                XDS_MAX_RETRIES: "3"
                apim_admin_pwd: admin
                enforcer_admin_pwd: admin
                tm_admin_pwd: admin
                analytics_authURL: https://localhost:8080
                analytics_authToken:
                JAVA_OPTS: -Dhttpclient.hostnameVerifier=AllowAll -Xms512m -Xmx512m -XX:MaxRAMFraction=2
              readinessProbe:
                path: /api/am/devportal/v2/apis?limit=2&offset=2
                port: 9443
                initialDelaySeconds: 20
                periodSeconds: 20
                failureThreshold: 5
              livenessProbe:
                path: /api/am/devportal/v2/apis?limit=2&offset=2
                port: 9443
                initialDelaySeconds: 20
                periodSeconds: 20
                failureThreshold: 5
              strategy: Recreate
              imagePullPolicy: IfNotPresent
              image: wso2/choreo-connect-enforcer:1.1.0-ubuntu
              security:
                sslHostname: "enforcer"

postgresql:
  fullnameOverride: "wso2apk-db-service"
  auth:
    database: WSO2AM_DB
    postgresPassword: wso2carbon
    username: wso2carbon
    password: wso2carbon
  primary:
    extendedConfiguration: |
      max_connections = 400
    initdb:
      scriptsConfigMap: postgres-initdb-scripts-configmap
      user: wso2carbon
      password: wso2carbon
    service:
      ports:
        postgresql: 5432
  image:
    debug: true

ipk:
  wso2:
    deployment:
      wso2is:
        replicas: 0
        imagePullPolicy: IfNotPresent
