{{- if or .Values.wso2.apk.dp.enabled .Values.wso2.apk.cp.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "apk-helm.resource.prefix" . }}-log-conf
  namespace: {{ .Release.Namespace }}
data:
  config.toml: | 
    [adapter]
    {{ if and .Values.wso2.apk.dp.adapter.configs .Values.wso2.apk.dp.adapter.configs.apiNamespaces }}
    [adapter.operator]
      namespaces = [{{ include "commaJoinedQuotedList" .Values.wso2.apk.dp.adapter.configs.apiNamespaces}}]
    {{ end}}    

    [adapter.keystore]
      certPath = "/home/wso2/security/keystore/adapter.crt"
      keyPath = "/home/wso2/security/keystore/adapter.key"

    [adapter.truststore]
      location = "/home/wso2/security/truststore"

    [router]
      securedListenerPort = 9095
      systemHost = "localhost"
      useRemoteAddress = false

    [router.keystore]
      certPath = "/home/wso2/security/keystore/router.crt"
      keyPath = "/home/wso2/security/keystore/router.key"

    [router.upstream.tls]
      trustedCertPath = "/etc/ssl/certs/ca-certificates.crt"
      verifyHostName = true
      disableSslVerification = false

    [router.downstream.tls]
      mtlsAPIsEnabled = false
      trustedCertPath = "/etc/ssl/certs/ca-certificates.crt"
    
    {{ if .Values.wso2.apk.dp.ratelimiter }}
    [router.ratelimit]
      host = "{{ template "apk-helm.resource.prefix" . }}-ratelimiter-service.{{ .Release.Namespace }}.svc"
      enabled = {{ and .Values.wso2.apk.dp.enabled .Values.wso2.apk.dp.ratelimiter.enabled}}
      keyFilePath = "/home/wso2/security/keystore/router.key"
      certFilePath = "/home/wso2/security/keystore/router.crt"
      caCertFilePath = "/home/wso2/security/truststore/ratelimiter.crt"
      sslCertSANHostname = "ratelimiter"
    {{end}}

    [enforcer]
    [enforcer.security.internalKey]
      enabled = true
      issuer = "https://apim.wso2.com/publisher"
      certificateFilePath = "/home/wso2/security/truststore/wso2carbon.pem"
    
    [enforcer.security.apiKey]
      enabled = true
      issuer = "https://apim.wso2.com/publisher"
      certificateFilePath = "/home/wso2/security/truststore/wso2carbon.pem"
    
    [enforcer.jwtGenerator]
      publicCertificatePath = "/home/wso2/security/truststore/mg.pem"
      privateKeyPath = "/home/wso2/security/keystore/mg.key"

    [enforcer.metrics]
      enabled = false
    
    {{ if and .Values.wso2.apk.dp.gatewayRuntime.tracing .Values.wso2.apk.dp.gatewayRuntime.tracing.enabled }}
    [tracing]
      enabled = true
      type = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.type }}"
      [tracing.configProperties]
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.host }}
        host = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.host }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.port }}
        port = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.port }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.endpoint }}
        endpoint = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.endpoint }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.maxPathLength }}
        maxPathLength = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.maxPathLength }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.connectionString }}
        connectionString = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.connectionString }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.authHeaderName }}
        authHeaderName = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.authHeaderName }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.authHeaderValue }}
        authHeaderValue = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.authHeaderValue }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.instrumentationName }}
        instrumentationName = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.instrumentationName }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.maximumTracesPerSecond }}
        maximumTracesPerSecond = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.maximumTracesPerSecond }}"
        {{end}}
        {{ if .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.connectionTimeout }}
        connectionTimeout = "{{ .Values.wso2.apk.dp.gatewayRuntime.tracing.configProperties.connectionTimeout }}"
        {{end}}
    {{end}}

    {{- if and .Values.wso2.apk.dp.gatewayRuntime.analytics .Values.wso2.apk.dp.gatewayRuntime.analytics.enabled}}
    [analytics]
      enabled = true
      type = {{ .Values.wso2.apk.dp.gatewayRuntime.analytics.type }}

    [analytics.adapter]
      bufferFlushInterval = "1s"
      bufferSizeBytes = 16384
      gRPCRequestTimeout = "20s"
    
    [analytics.enforcer.configProperties]
      {{- if .Values.wso2.apk.dp.gatewayRuntime.analytics.authURL }}
      authURL = "{{ .Values.wso2.apk.dp.gatewayRuntime.analytics.authURL }}"
      {{- end }}
      {{- if .Values.wso2.apk.dp.gatewayRuntime.analytics.authToken }}
      authToken = "{{ .Values.wso2.apk.dp.gatewayRuntime.analytics.authToken }}"
      {{- end }}
    
    [analytics.enforcer.LogReceiver]
      port = 18090
      maxMessageSize = 1000000000
      maxHeaderLimit = 8192
      keepAliveTime = 600
    
    [analytics.enforcer.LogReceiver.threadPool]
      coreSize = 10
      maxSize = 100
      keepAliveTime = 600
      queueSize = 1000
    {{- end }}

    {{ if .Values.wso2.apk.dp.partitionServer}}
    [partitionServer]
      enabled = {{.Values.wso2.apk.dp.partitionServer.enabled}}
      host = "{{ .Values.wso2.apk.dp.partitionServer.host}}"
      serviceBasePath = "{{ .Values.wso2.apk.dp.partitionServer.serviceBasePath}}"
      partitionName = "{{ .Values.wso2.apk.dp.partitionServer.partitionName}}"
      disableSslVerification = {{eq .Values.wso2.apk.dp.partitionServer.hostnameVerificationEnable false }}
    {{end}}
    {{ if and .Values.wso2.apk.dp.gatewayRuntime.deployment.enforcer.configs .Values.wso2.apk.dp.gatewayRuntime.deployment.enforcer.configs.filters }}
    {{ range $index, $filter := .Values.wso2.apk.dp.gatewayRuntime.deployment.enforcer.configs.filters}}
    [[enforcer.filters]]
        className = "{{$filter.className}}"
        position = {{$filter.position}}
        {{ if $filter.properties }}
        [enforcer.filters.configProperties]
        {{range $key, $value := $filter.properties}}
        {{$value.name}} = "{{$value.value}}"
        {{end}}
        {{end}}
    {{end}}
    {{end}}

  log_config.toml: |
    # The logging configuration for Adapter

    ## Adapter root Level configurations

    {{- if .Values.wso2.apk.dp.adapter.logging }}
    logfile = "{{ .Values.wso2.apk.dp.adapter.logging.logFile | default "logs/adapter.log" }}" # This file will be created inside adapter container.
    logLevel = "{{ .Values.wso2.apk.dp.adapter.logging.level | default "INFO" }}" # LogLevels can be "DEBG", "FATL", "ERRO", "WARN", "INFO", "PANC"
    LogFormat = "{{ .Values.wso2.apk.dp.adapter.logging.logFormat | default "TEXT" }}" # Values can be "JSON", "TEXT"
    {{- else }}
    logfile = "logs/adapter.log" # This file will be created inside adapter container.
    logLevel = "INFO" # LogLevels can be "DEBG", "FATL", "ERRO", "WARN", "INFO", "PANC"
    LogFormat = "TEXT" # Values can be "JSON", "TEXT"
    {{- end }}

    [rotation]
    MaxSize = 10    # In MegaBytes (MB)
    MaxBackups = 3
    MaxAge =  2   # In days
    Compress = true

    ## Adapter package Level configurations

    [[pkg]]
    name = "github.com/wso2/apk/adapter/internal/adapter"
    logLevel = "INFO" # LogLevels can be "DEBG", "FATL", "ERRO", "WARN", "INFO", "PANC"

    [[pkg]]
    name = "github.com/wso2/apk/adapter/internal/oasparser"
    logLevel = "INFO"


    # The logging configuration for Router
    {{- if .Values.wso2.apk.dp.gatewayRuntime.deployment.router.logging }}
    [wireLogs]
    enable = {{ .Values.wso2.apk.dp.gatewayRuntime.deployment.router.logging.wireLogs.enable | default false }}
    include = ["Headers", "Body", "Trailers"]
    {{- else }}
    [wireLogs]
    enable = false
    include = ["Headers", "Body", "Trailers"]
    {{- end }}
      
    {{- if and .Values.wso2.apk.dp.gatewayRuntime.deployment.router.logging .Values.wso2.apk.dp.gatewayRuntime.deployment.router.logging.accessLogs }}
    [accessLogs]
    enable = {{ .Values.wso2.apk.dp.gatewayRuntime.deployment.router.logging.accessLogs.enable | default false }}
    logfile = "{{ .Values.wso2.apk.dp.gatewayRuntime.deployment.router.logging.accessLogs.logfile | default "/tmp/envoy.access.log" }}" # This file will be created inside router container.
    format = "[%START_TIME%] '%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%' %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% '%REQ(X-FORWARDED-FOR)%' '%REQ(USER-AGENT)%' '%REQ(X-REQUEST-ID)%' '%REQ(:AUTHORITY)%' '%UPSTREAM_HOST%'\n"
    {{- else }}
    [accessLogs]
    enable = false
    logfile = "/tmp/envoy.access.log" # This file will be created inside router container.
    format = "[%START_TIME%] '%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%' %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% '%REQ(X-FORWARDED-FOR)%' '%REQ(USER-AGENT)%' '%REQ(X-REQUEST-ID)%' '%REQ(:AUTHORITY)%' '%UPSTREAM_HOST%'\n"
    {{- end }}

  log4j2.properties: |
    monitorInterval=20

    appenders = ENFORCER_CONSOLE

    appender.ENFORCER_CONSOLE.type = Console
    appender.ENFORCER_CONSOLE.name = ENFORCER_CONSOLE
    appender.ENFORCER_CONSOLE.layout.type = PatternLayout
    appender.ENFORCER_CONSOLE.layout.pattern = [%d{DEFAULT}][TRACE_ID: %X{traceId}][API_UUID: %X{API_UUID}]%x %5p - {%c} - \%m [%errorDetails]%n
    appender.ENFORCER_CONSOLE.filter.threshold.type = ThresholdFilter
    appender.ENFORCER_CONSOLE.filter.threshold.level = DEBUG

    loggers = reporter, enforcer, io-swagger-v3, enforcer-interceptors

    logger.reporter.name = org.wso2.am.analytics.publisher.reporter.elk
    {{- if .Values.wso2.apk.dp.gatewayRuntime.analytics }}
    logger.reporter.level = {{ .Values.wso2.apk.dp.gatewayRuntime.analytics.logLevel | default "INFO" }}
    {{- else }}
    logger.reporter.level = INFO
    {{- end }}
    logger.reporter.additivity = false
    logger.reporter.appenderRef.console.ref = ENFORCER_CONSOLE

    # Log access log to console
    logger.enforcer-interceptors.name = org.wso2.apk.enforcer.grpc.interceptors
    # Change the log level into DEBUG to view the access logs.
    {{- if .Values.wso2.apk.dp.gatewayRuntime.deployment.enforcer.logging }}
    logger.enforcer-interceptors.level = {{ .Values.wso2.apk.dp.gatewayRuntime.deployment.enforcer.logging.level | default "INFO" }}
    {{- else }}
    logger.enforcer-interceptors.level = INFO
    {{- end }} 
    logger.enforcer-interceptors.additivity = false
    logger.enforcer-interceptors.appenderRef.console.ref = ENFORCER_CONSOLE

    # Log to console 
    logger.enforcer.name = org.wso2.apk.enforcer
    {{- if .Values.wso2.apk.dp.gatewayRuntime.deployment.enforcer.logging }}
    logger.enforcer.level = {{ .Values.wso2.apk.dp.gatewayRuntime.deployment.enforcer.logging.level | default "INFO" }}
    {{- else }}
    logger.enforcer.level = INFO
    {{- end }} 
    logger.enforcer.additivity = false
    logger.enforcer.appenderRef.console.ref = ENFORCER_CONSOLE

    logger.io-swagger-v3.name = io.swagger.v3.parser
    logger.io-swagger-v3.level = ERROR
    logger.io-swagger-v3.additivity = false
    logger.io-swagger-v3.appenderRef.console.ref = ENFORCER_CONSOLE

    rootLogger.level = ERROR
    rootLogger.appenderRef.ENFORCER_CONSOLE.ref = ENFORCER_CONSOLE
{{- end -}}
