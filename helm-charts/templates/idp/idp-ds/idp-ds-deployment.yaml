# Copyright (c) 2022, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
#
# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.

{{- if .Values.idp.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "apk-helm.resource.prefix" . }}-idpds-deployment
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.idp.idpds.deployment.replicas }}
  strategy:
    type: {{ .Values.idp.idpds.deployment.strategy }}
  selector:
    matchLabels:
{{ include "apk-helm.pod.selectorLabels" (dict "root" . "app" "idp-ds" ) | indent 6}}
  template:
    metadata:
      labels:
{{ include "apk-helm.pod.selectorLabels" (dict "root" . "app" "idp-ds" ) | indent 8}}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/idp/idp-ds/idp-ds-configmap.yaml") . | sha256sum }}
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.32
          command: ['sh', '-c', 'echo -e "Checking for the availability of DB Server deployment"; while ! nc -z "{{ .Values.idp.database.host }}" {{.Values.idp.database.port }}; do sleep 1; printf "-"; done; echo -e "  >> DB Server has started";']
      containers:
        - name: idpds
          image: {{ .Values.idp.idpds.deployment.image }}
          imagePullPolicy: {{ .Values.idp.idpds.deployment.imagePullPolicy }}
          ports:
            - containerPort: 9443
              protocol: "TCP"
          readinessProbe:
            httpGet:
              path: /health
              port: 9443
              scheme: HTTPS
            initialDelaySeconds: {{ .Values.idp.idpds.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.idp.idpds.deployment.readinessProbe.periodSeconds }}    
          livenessProbe:
            httpGet:
              path: /health
              port: 9443
              scheme: HTTPS
            initialDelaySeconds: {{ .Values.idp.idpds.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.idp.idpds.deployment.livenessProbe.periodSeconds }}
{{ include "apk-helm.deployment.resources" .Values.idp.idpds.deployment.resources | indent 10 }}
          volumeMounts:
            - mountPath: /home/wso2apk/idp/conf/Config.toml
              name: config-toml-volume
              subPath: Config.toml
            - mountPath: /home/wso2apk/idp/security/wso2carbon.key
              name: idp-signing-keystore-volume
              subPath: wso2carbon.key
            - mountPath: /home/wso2apk/idp/security/wso2carbon.pem
              name: idp-signing-keystore-volume
              subPath: wso2carbon.pem
            - name: idp-ds-tls-volume
              mountPath: /home/wso2apk/idp/security/idp.key
            {{- if and .Values.idp.idpds.configs .Values.idp.idpds.configs.tls }}
              subPath: {{ .Values.idp.idpds.configs.tls.certKeyFilename | default "tls.key" }}
            {{- else }}
              subPath: tls.key
            {{- end }}
            - name: idp-ds-tls-volume
              mountPath: /home/wso2apk/idp/security/idp.crt
            {{- if and .Values.idp.idpds.configs .Values.idp.idpds.configs.tls }}
              subPath: {{ .Values.idp.idpds.configs.tls.certFilename | default "tls.crt" }}
            {{- else }}
              subPath: tls.crt
            {{- end }}
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{ if and .Values.wso2.apk.idp.database .Values.wso2.apk.idp.database.secretName }}
                  name: "{{ .Values.idp.database.secretName}}"
                  key: "{{ .Values.idp.database.secretKey}}"
                  {{ else }}
                  name: "apk-db-secret"
                  key: "DB_PASSWORD"
                  {{ end }}

      {{- if and .Values.wso2.subscription .Values.wso2.subscription.imagePullSecrets}}
      imagePullSecrets:
        - name: {{ .Values.wso2.subscription.imagePullSecrets }}
      {{ end }}      
      volumes:
        - name: config-toml-volume
          configMap:
            name: {{ template "apk-helm.resource.prefix" . }}-idp-ds-configmap
        - name: idp-signing-keystore-volume
          secret: 
            secretName: {{ template "apk-helm.resource.prefix" . }}-idp-signing-keystore-secret
        - name: idp-ds-tls-volume
          secret:
       {{ if and .Values.idp.idpds.configs .Values.idp.idpds.configs.tls }}
            secretName: {{ .Values.idp.idpds.configs.tls.secretName | default (printf "%s-idpds-ds-server-cert" (include "apk-helm.resource.prefix" .)) }}
       {{ else }}
            secretName: {{ template "apk-helm.resource.prefix" . }}-idp-ds-server-cert
       {{ end }}

{{- end -}}
