# Copyright (c) 2025 WSO2 LLC. (http://www.wso2.com) All Rights Reserved.
#
# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
{{- if .Values.wso2.kgw.dp.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "kubernetes-gateway-helm.resource.prefix" . }}-log-conf
  namespace: {{ .Release.Namespace }}
data:
  config.toml: | 
    [deployment.gateway]
      namespace = "{{ .Release.Namespace }}"
      commonControllerHostName = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-common-controller-service.{{ .Release.Namespace }}.svc"
      commonControllerHost = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-common-controller-service.{{ .Release.Namespace }}.svc"
      enforcerServerName = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-enforcer-service.{{ .Release.Namespace }}.svc"
      {{- if and .Values.wso2.kgw.dp.gatewayRuntime.deployment .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs }}
      enforcerImage = "{{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.image | default "kgw-enforcer:1.3.0-SNAPSHOT" }}"
      enforcerImagePullPolicy = "{{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.imagePullPolicy | default "Always" }}"
      {{- if and .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.javaOpts }}
        javaOpts = "{{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.javaOpts }}"
      {{- end }}
      {{- range .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.ports}}
      {{- if and .name .value }}
      [[deployment.gateway.enforcerPorts]]
        name = "{{ .name }}"
        containerPort = {{ .value }} 
        expose = {{ .expose | default false }}    
      {{- end }} 
      {{- end }} 
      {{- end }} 

    [deployment.gateway.volumes]
      enforcerKeystoreSecretVolume = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-enforcer-server-cert"
      enforcerJwtSecretVolume = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-enforcer-keystore-secret"
      enforcerTrustedCerts = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-enforcer-truststore-secret"
      enforcerApikeyCert = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-enforcer-truststore-secret"
      iDPCertificateSecretVolume = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-enforcer-truststore-secret"
      LogConfVolume = "{{ template "kubernetes-gateway-helm.resource.prefix" . }}-log-conf"

    [enforcer]
    {{ if and .Values.wso2.kgw.dp.gatewayRuntime.deployment .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer }}
    enforcerDisabled = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.disabled | default false }}
    {{ end }}
    {{ if and .Values.wso2.kgw.dp.gatewayRuntime.deployment .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs }}
    mandateSubscriptionValidation = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.mandateSubscriptionValidation | default false }}
    mandateInternalKeyValidation = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.mandateInternalKeyValidation | default false }}
    {{ end }}

    {{ if and .Values.wso2.kgw.dp.gatewayRuntime.deployment .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService }}
    [enforcer.authService]
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.maxMessageSize }}
      maxMessageSize = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.maxMessageSize | int64 }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.maxHeaderLimit }}
      maxHeaderLimit = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.maxHeaderLimit }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.keepAliveTime }}
      keepAliveTime = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.keepAliveTime }}
      {{end}}
    
    {{ if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool }}
    [enforcer.authService.threadPool]
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool.coreSize }}
      coreSize = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool.coreSize }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool.maxSize }}
      maxSize = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool.maxSize }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool.keepAliveTime }}
      keepAliveTime = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool.keepAliveTime }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool.queueSize }}
      queueSize = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.authService.threadPool.queueSize }}
      {{end}}
    {{end}}
    {{end}}

    {{ if and .Values.wso2.kgw.dp.gatewayRuntime.deployment .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.cors }}
    [enforcer.cors]
      enabled = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.cors.enabled | default false }}
      accessControlAllowOrigins = [{{ include "commaJoinedQuotedList" .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.cors.accessControlAllowOrigins }}]
      accessControlAllowMethods = [{{ include "commaJoinedQuotedList" .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.cors.accessControlAllowMethods }}]
      accessControlAllowHeaders = [{{ include "commaJoinedQuotedList" .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.cors.accessControlAllowHeaders }}]
      accessControlAllowCredentials = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.cors.accessControlAllowCredentials | default false }}
      accessControlExposeHeaders = [{{ include "commaJoinedQuotedList" .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.cors.accessControlExposeHeaders }}]
    {{- else }}
    [enforcer.cors]
      enabled = true
      accessControlAllowOrigins = ["*"]
      accessControlAllowMethods = ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
      accessControlAllowHeaders = ["authorization", "Access-Control-Allow-Origin", "Content-Type", "Internal-key", "apiKey"]
      accessControlAllowCredentials = false
      accessControlExposeHeaders = ["*"]
    {{end}}
    {{- if and .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.apiKey }}
    [enforcer.security.apiKey]
    enabled = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.apiKey.enabled | default true }}
    issuer = "{{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.apiKey.issuer }}"
    {{- end }}
    [enforcer.jwtGenerator]
      publicCertificatePath = "/home/wso2/security/truststore/mg.pem"
      privateKeyPath = "/home/wso2/security/keystore/mg.key"

    [enforcer.metrics]
      enabled = false
    
    {{- if and .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.JWKSClient }}
    [enforcer.client]
       skipSSL = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.JWKSClient.skipSSLVerification | default false }}
       hostnameVerifier = "{{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.configs.JWKSClient.hostnameVerifier | default "AllowAll" }}"
    {{- end }}
    
    {{ if and .Values.wso2.kgw.dp.gatewayRuntime.tracing .Values.wso2.kgw.dp.gatewayRuntime.tracing.enabled }}
    [tracing]
      enabled = true
      type = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.type }}"
      [tracing.configProperties]
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.host }}
        host = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.host }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.port }}
        port = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.port }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.endpoint }}
        endpoint = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.endpoint }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.maxPathLength }}
        maxPathLength = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.maxPathLength }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.connectionString }}
        connectionString = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.connectionString }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.authHeaderName }}
        authHeaderName = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.authHeaderName }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.authHeaderValue }}
        authHeaderValue = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.authHeaderValue }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.instrumentationName }}
        instrumentationName = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.instrumentationName }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.maximumTracesPerSecond }}
        maximumTracesPerSecond = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.maximumTracesPerSecond }}"
        {{end}}
        {{ if .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.connectionTimeout }}
        connectionTimeout = "{{ .Values.wso2.kgw.dp.gatewayRuntime.tracing.configProperties.connectionTimeout }}"
        {{end}}
    {{end}}

    {{- if and .Values.wso2.kgw.dp.gatewayRuntime.analytics .Values.wso2.kgw.dp.gatewayRuntime.analytics.enabled}}
    [analytics]
     enabled = true
    {{- if and .Values.wso2.kgw.dp.gatewayRuntime.analytics.properties}}
    [analytics.properties]
    {{- range $key, $value := .Values.wso2.kgw.dp.gatewayRuntime.analytics.properties}}
    "{{$key}}" = "{{$value}}"
    {{- end}}
    {{- end }}
    {{- if and .Values.wso2.kgw.dp.gatewayRuntime.analytics.publishers}}
    [analytics.enforcer]
    {{- range .Values.wso2.kgw.dp.gatewayRuntime.analytics.publishers}}
    [[analytics.enforcer.publisher]]
    enabled = {{ .enabled }}
    type = "{{ .type }}"
    {{- if and .configProperties}}
    [analytics.enforcer.publisher.configProperties]
    {{- range $key, $value := .configProperties}}
    "{{$key}}" = "{{$value}}"
    {{- end }}
    {{- end}}
    {{- end }}
    {{- end }}

    
    {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver }}
    [analytics.enforcer.LogReceiver]
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.maxMessageSize }}
      maxMessageSize = {{ .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.maxMessageSize }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.maxHeaderLimit }}
      maxHeaderLimit = {{ .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.maxHeaderLimit }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.keepAliveTime }}
      keepAliveTime = {{ .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.keepAliveTime }}
      {{end}}
    {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool }}
    [analytics.enforcer.LogReceiver.threadPool]
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool.coreSize }}
      coreSize = {{ .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool.coreSize }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool.maxSize }}
      maxSize = {{ .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool.maxSize }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool.keepAliveTime }}
      keepAliveTime = {{ .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool.keepAliveTime }}
      {{end}}
      {{ if .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool.queueSize }}
      queueSize = {{ .Values.wso2.kgw.dp.gatewayRuntime.analytics.receiver.threadPool.queueSize }}
      {{end}}
    {{end}}
    {{end}}
    {{- end }}

    {{ if .Values.wso2.kgw.dp.partitionServer}}
    [partitionServer]
      enabled = {{.Values.wso2.kgw.dp.partitionServer.enabled}}
      host = "{{ .Values.wso2.kgw.dp.partitionServer.host}}"
      serviceBasePath = "{{ .Values.wso2.kgw.dp.partitionServer.serviceBasePath}}"
      partitionName = "{{ .Values.wso2.kgw.dp.partitionServer.partitionName}}"
      disableSslVerification = {{eq .Values.wso2.kgw.dp.partitionServer.hostnameVerificationEnable false }}
    {{end}}

  log4j2.properties: |
    monitorInterval=20

    appenders = ENFORCER_CONSOLE

    appender.ENFORCER_CONSOLE.type = Console
    appender.ENFORCER_CONSOLE.name = ENFORCER_CONSOLE
    appender.ENFORCER_CONSOLE.layout.type = PatternLayout
    appender.ENFORCER_CONSOLE.layout.pattern = [%d{DEFAULT}][TRACE_ID: %X{traceId}][API_UUID: %X{API_UUID}]%x %5p - {%c} - \%m [%errorDetails]%n
    appender.ENFORCER_CONSOLE.filter.threshold.type = ThresholdFilter
    appender.ENFORCER_CONSOLE.filter.threshold.level = DEBUG

    loggers = reporter, enforcer, io-swagger-v3, enforcer-interceptors

    logger.reporter.name = org.wso2.am.analytics.publisher.reporter.elk
    {{- if .Values.wso2.kgw.dp.gatewayRuntime.analytics }}
    logger.reporter.level = {{ .Values.wso2.kgw.dp.gatewayRuntime.analytics.logLevel | default "INFO" }}
    {{- else }}
    logger.reporter.level = INFO
    {{- end }}
    logger.reporter.additivity = false
    logger.reporter.appenderRef.console.ref = ENFORCER_CONSOLE

    # Log access log to console
    logger.enforcer-interceptors.name = org.wso2.kgw.enforcer.grpc.interceptors
    # Change the log level into DEBUG to view the access logs.
    {{- if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.logging }}
    logger.enforcer-interceptors.level = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.logging.level | default "INFO" }}
    {{- else }}
    logger.enforcer-interceptors.level = INFO
    {{- end }} 
    logger.enforcer-interceptors.additivity = false
    logger.enforcer-interceptors.appenderRef.console.ref = ENFORCER_CONSOLE

    # Log to console 
    logger.enforcer.name = org.wso2.kgw.enforcer
    {{- if .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.logging }}
    logger.enforcer.level = {{ .Values.wso2.kgw.dp.gatewayRuntime.deployment.enforcer.logging.level | default "INFO" }}
    {{- else }}
    logger.enforcer.level = INFO
    {{- end }} 
    logger.enforcer.additivity = false
    logger.enforcer.appenderRef.console.ref = ENFORCER_CONSOLE

    logger.io-swagger-v3.name = io.swagger.v3.parser
    logger.io-swagger-v3.level = ERROR
    logger.io-swagger-v3.additivity = false
    logger.io-swagger-v3.appenderRef.console.ref = ENFORCER_CONSOLE

    rootLogger.level = ERROR
    rootLogger.appenderRef.ENFORCER_CONSOLE.ref = ENFORCER_CONSOLE
{{- end -}}
