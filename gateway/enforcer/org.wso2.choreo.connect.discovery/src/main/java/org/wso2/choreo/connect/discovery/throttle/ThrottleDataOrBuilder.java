// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wso2/discovery/throttle/throttle_data.proto

package org.wso2.choreo.connect.discovery.throttle;

public interface ThrottleDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:wso2.discovery.throttle.ThrottleData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>repeated string key_templates = 1;</code>
   * @return A list containing the keyTemplates.
   */
  java.util.List<java.lang.String>
      getKeyTemplatesList();
  /**
   * <code>repeated string key_templates = 1;</code>
   * @return The count of keyTemplates.
   */
  int getKeyTemplatesCount();
  /**
   * <code>repeated string key_templates = 1;</code>
   * @param index The index of the element to return.
   * @return The keyTemplates at the given index.
   */
  java.lang.String getKeyTemplates(int index);
  /**
   * <code>repeated string key_templates = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the keyTemplates at the given index.
   */
  com.google.protobuf.ByteString
      getKeyTemplatesBytes(int index);

  /**
   * <code>repeated string blocking_conditions = 2;</code>
   * @return A list containing the blockingConditions.
   */
  java.util.List<java.lang.String>
      getBlockingConditionsList();
  /**
   * <code>repeated string blocking_conditions = 2;</code>
   * @return The count of blockingConditions.
   */
  int getBlockingConditionsCount();
  /**
   * <code>repeated string blocking_conditions = 2;</code>
   * @param index The index of the element to return.
   * @return The blockingConditions at the given index.
   */
  java.lang.String getBlockingConditions(int index);
  /**
   * <code>repeated string blocking_conditions = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the blockingConditions at the given index.
   */
  com.google.protobuf.ByteString
      getBlockingConditionsBytes(int index);

  /**
   * <code>repeated .wso2.discovery.throttle.IPCondition ip_blocking_conditions = 3;</code>
   */
  java.util.List<org.wso2.choreo.connect.discovery.throttle.IPCondition> 
      getIpBlockingConditionsList();
  /**
   * <code>repeated .wso2.discovery.throttle.IPCondition ip_blocking_conditions = 3;</code>
   */
  org.wso2.choreo.connect.discovery.throttle.IPCondition getIpBlockingConditions(int index);
  /**
   * <code>repeated .wso2.discovery.throttle.IPCondition ip_blocking_conditions = 3;</code>
   */
  int getIpBlockingConditionsCount();
  /**
   * <code>repeated .wso2.discovery.throttle.IPCondition ip_blocking_conditions = 3;</code>
   */
  java.util.List<? extends org.wso2.choreo.connect.discovery.throttle.IPConditionOrBuilder> 
      getIpBlockingConditionsOrBuilderList();
  /**
   * <code>repeated .wso2.discovery.throttle.IPCondition ip_blocking_conditions = 3;</code>
   */
  org.wso2.choreo.connect.discovery.throttle.IPConditionOrBuilder getIpBlockingConditionsOrBuilder(
      int index);
}
