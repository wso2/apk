// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wso2/discovery/subscription/jwtIssuer.proto

package org.wso2.apk.enforcer.discovery.subscription;

public final class JWTIssuerProto {
  private JWTIssuerProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_wso2_discovery_subscription_JWTIssuer_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_wso2_discovery_subscription_JWTIssuer_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_wso2_discovery_subscription_Certificate_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_wso2_discovery_subscription_Certificate_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_wso2_discovery_subscription_JWKS_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_wso2_discovery_subscription_JWKS_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n+wso2/discovery/subscription/jwtIssuer." +
      "proto\022\033wso2.discovery.subscription\"\276\001\n\tJ" +
      "WTIssuer\022\017\n\007eventId\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022" +
      "\024\n\014organization\030\003 \001(\t\022\016\n\006issuer\030\004 \001(\t\022=\n" +
      "\013certificate\030\005 \001(\0132(.wso2.discovery.subs" +
      "cription.Certificate\022\030\n\020consumerKeyClaim" +
      "\030\006 \001(\t\022\023\n\013scopesClaim\030\007 \001(\t\"S\n\013Certifica" +
      "te\022\023\n\013certificate\030\001 \001(\t\022/\n\004jwks\030\002 \001(\0132!." +
      "wso2.discovery.subscription.JWKS\" \n\004JWKS" +
      "\022\013\n\003url\030\001 \001(\t\022\013\n\003tls\030\002 \001(\tB\221\001\n,org.wso2." +
      "apk.enforcer.discovery.subscriptionB\016JWT" +
      "IssuerProtoP\001ZOgithub.com/envoyproxy/go-" +
      "control-plane/wso2/discovery/subscriptio" +
      "n;subscriptionb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_wso2_discovery_subscription_JWTIssuer_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_wso2_discovery_subscription_JWTIssuer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_wso2_discovery_subscription_JWTIssuer_descriptor,
        new java.lang.String[] { "EventId", "Name", "Organization", "Issuer", "Certificate", "ConsumerKeyClaim", "ScopesClaim", });
    internal_static_wso2_discovery_subscription_Certificate_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_wso2_discovery_subscription_Certificate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_wso2_discovery_subscription_Certificate_descriptor,
        new java.lang.String[] { "Certificate", "Jwks", });
    internal_static_wso2_discovery_subscription_JWKS_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_wso2_discovery_subscription_JWKS_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_wso2_discovery_subscription_JWKS_descriptor,
        new java.lang.String[] { "Url", "Tls", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
