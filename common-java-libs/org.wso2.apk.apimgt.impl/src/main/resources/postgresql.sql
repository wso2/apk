BEGIN TRANSACTION;

CREATE SEQUENCE SUBSCRIBER_SEQUENCE START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS SUBSCRIBER (
    SUBSCRIBER_ID INTEGER DEFAULT nextval('subscriber_sequence'),
    USER_ID VARCHAR(255) NOT NULL,
    ORGANIZATION VARCHAR(100) NOT NULL,
    EMAIL_ADDRESS VARCHAR(256) NULL,
    DATE_SUBSCRIBED TIMESTAMP NOT NULL,
    CREATED_BY VARCHAR(100),
    CREATED_TIME TIMESTAMP,
    UPDATED_BY VARCHAR(100),
    UPDATED_TIME TIMESTAMP,
    PRIMARY KEY (SUBSCRIBER_ID),
    UNIQUE (ORGANIZATION,USER_ID)
);

CREATE SEQUENCE APPLICATION_SEQUENCE START WITH 1 INCREMENT BY 1 ;
CREATE TABLE IF NOT EXISTS APPLICATION (
    APPLICATION_ID INTEGER DEFAULT nextval('application_sequence'),
    NAME VARCHAR(100),
    SUBSCRIBER_ID INTEGER,
    APPLICATION_TIER VARCHAR(50) DEFAULT 'Unlimited',
    CALLBACK_URL VARCHAR(512),
    DESCRIPTION VARCHAR(512),
    APPLICATION_STATUS VARCHAR(50) DEFAULT 'APPROVED',
    GROUP_ID VARCHAR(100),
    CREATED_BY VARCHAR(100),
    CREATED_TIME TIMESTAMP,
    UPDATED_BY VARCHAR(100),
    UPDATED_TIME TIMESTAMP,
    UUID VARCHAR(256),
    TOKEN_TYPE VARCHAR(10),
    ORGANIZATION VARCHAR(100),
    FOREIGN KEY(SUBSCRIBER_ID) REFERENCES SUBSCRIBER(SUBSCRIBER_ID) ON UPDATE CASCADE ON DELETE RESTRICT,
    PRIMARY KEY(APPLICATION_ID),
    UNIQUE(NAME,SUBSCRIBER_ID,ORGANIZATION),
    UNIQUE(UUID)
);

CREATE SEQUENCE API_SEQUENCE START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS API (
    API_ID INTEGER DEFAULT nextval('api_sequence'),
    API_UUID VARCHAR(256),
    API_PROVIDER VARCHAR(256),
    API_NAME VARCHAR(256),
    API_VERSION VARCHAR(30),
    CONTEXT VARCHAR(256),
    CONTEXT_TEMPLATE VARCHAR(256),
    API_TIER VARCHAR(256),
    API_TYPE VARCHAR(10),
    ORGANIZATION VARCHAR(100),
    GATEWAY_VENDOR VARCHAR(100) DEFAULT 'wso2',
    CREATED_BY VARCHAR(100),
    CREATED_TIME TIMESTAMP,
    UPDATED_BY VARCHAR(100),
    UPDATED_TIME TIMESTAMP,
    STATUS VARCHAR(30),
    VERSION_COMPARABLE VARCHAR(15),
    LOG_LEVEL VARCHAR(255) DEFAULT 'OFF',
    REVISIONS_CREATED INTEGER DEFAULT 0,
    ARTIFACT JSONB NOT NULL,
    DEFAULT_API_VERSION VARCHAR(30),
    PRIMARY KEY(API_ID),
    UNIQUE(API_PROVIDER,API_NAME,API_VERSION,ORGANIZATION),
    UNIQUE(API_UUID)
);

CREATE TABLE API_ARTIFACT (
    ORGANIZATION VARCHAR(100) NOT NULL,
    API_UUID VARCHAR(100) NOT NULL,
    API_DEFINITION BYTEA,
    MEDIA_TYPE VARCHAR(100)
);

CREATE SEQUENCE RESOURCE_CATEGORIES_seq;
CREATE TABLE RESOURCE_CATEGORIES (
    RESOURCE_CATEGORY_ID INTEGER DEFAULT NEXTVAL ('RESOURCE_CATEGORIES_seq'),
    RESOURCE_CATEGORY VARCHAR(255),
    PRIMARY KEY (RESOURCE_CATEGORY_ID),
    UNIQUE (RESOURCE_CATEGORY)
);

CREATE TABLE API_RESOURCES (
    UUID VARCHAR(255),
    API_ID VARCHAR(255),
    RESOURCE_CATEGORY_ID INTEGER,
    DATA_TYPE VARCHAR(255),
    RESOURCE_CONTENT TSVECTOR,
    RESOURCE_BINARY_VALUE BYTEA,
    CREATED_BY VARCHAR(100),
    CREATED_TIME TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY VARCHAR(100),
    LAST_UPDATED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(UUID),
    FOREIGN KEY(API_ID) REFERENCES API(API_UUID) ON
    UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (RESOURCE_CATEGORY_ID) REFERENCES RESOURCE_CATEGORIES(RESOURCE_CATEGORY_ID)
);

CREATE TABLE API_DOC_META_DATA(
    UUID VARCHAR(255),
    RESOURCE_UUID VARCHAR(255),
    NAME VARCHAR(255),
    SUMMARY VARCHAR(1024),
    TYPE VARCHAR(255),
    OTHER_TYPE_NAME VARCHAR(255),
    SOURCE_URL VARCHAR(255),
    FILE_NAME VARCHAR(255),
    SOURCE_TYPE VARCHAR(255),
    VISIBILITY VARCHAR(30),
    CREATED_BY VARCHAR(100),
    CREATED_TIME TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY VARCHAR(100),
    LAST_UPDATED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(UUID),
    FOREIGN KEY(RESOURCE_UUID) REFERENCES API_RESOURCES(UUID) ON
    UPDATE CASCADE ON DELETE CASCADE
 );

CREATE SEQUENCE API_URL_MAPPING_SEQUENCE START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS API_URL_MAPPING (
    URL_MAPPING_ID INTEGER DEFAULT nextval('api_url_mapping_sequence'),
    API_ID INTEGER NOT NULL,
    HTTP_METHOD VARCHAR(20) NULL,
    AUTH_SCHEME VARCHAR(50) NULL,
    URL_PATTERN VARCHAR(512) NULL,
    THROTTLING_TIER varchar(512) DEFAULT NULL,
    MEDIATION_SCRIPT BYTEA,
    REVISION_UUID VARCHAR(255),
    PRIMARY KEY(URL_MAPPING_ID)
);

CREATE TABLE IF NOT EXISTS API_RESOURCE_SCOPE_MAPPING (
    SCOPE_NAME VARCHAR(256) NOT NULL,
    URL_MAPPING_ID INTEGER NOT NULL,
    ORGANIZATION VARCHAR(100) NOT NULL,
    FOREIGN KEY(URL_MAPPING_ID) REFERENCES API_URL_MAPPING(URL_MAPPING_ID) ON DELETE CASCADE,
    PRIMARY KEY(SCOPE_NAME, URL_MAPPING_ID)
);

CREATE SEQUENCE SUBSCRIPTION_SEQUENCE START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS SUBSCRIPTION (
    SUBSCRIPTION_ID INTEGER DEFAULT nextval('subscription_sequence'),
    TIER_ID VARCHAR(50),
    TIER_ID_PENDING VARCHAR(50),
    API_ID INTEGER,
    LAST_ACCESSED TIMESTAMP NULL,
    APPLICATION_ID INTEGER,
    SUB_STATUS VARCHAR(50),
    SUBS_CREATE_STATE VARCHAR(50) DEFAULT 'SUBSCRIBE',
    CREATED_BY VARCHAR(100),
    CREATED_TIME TIMESTAMP,
    UPDATED_BY VARCHAR(100),
    UPDATED_TIME TIMESTAMP,
    UUID VARCHAR(256),
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(API_ID) REFERENCES API(API_ID) ON
    UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (SUBSCRIPTION_ID),
    UNIQUE (UUID)
);

CREATE TABLE APPLICATION_KEY_MAPPING (
     UUID VARCHAR(100),
     APPLICATION_ID INTEGER,
     CONSUMER_KEY VARCHAR(512),
     KEY_TYPE VARCHAR(512) NOT NULL,
     STATE VARCHAR(30),
     CREATE_MODE VARCHAR(30) DEFAULT 'CREATED',
     APP_INFO BYTEA DEFAULT NULL,
     KEY_MANAGER VARCHAR(100),
     FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON UPDATE CASCADE ON DELETE CASCADE,
     PRIMARY KEY(APPLICATION_ID,KEY_TYPE,KEY_MANAGER)
);

CREATE SEQUENCE APPLICATION_REGISTRATION_SEQUENCE START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS APPLICATION_REGISTRATION (
    REG_ID INTEGER DEFAULT nextval('application_registration_sequence'),
    SUBSCRIBER_ID INT,
    WF_REF VARCHAR(255) NOT NULL,
    APP_ID INT,
    TOKEN_TYPE VARCHAR(30),
    TOKEN_SCOPE VARCHAR(1500) DEFAULT 'default',
    INPUTS VARCHAR(1000),
    ALLOWED_DOMAINS VARCHAR(256),
    VALIDITY_PERIOD BIGINT,
    KEY_MANAGER VARCHAR(255) NOT NULL,
    UNIQUE(SUBSCRIBER_ID,APP_ID,TOKEN_TYPE,KEY_MANAGER),
    FOREIGN KEY(SUBSCRIBER_ID) REFERENCES SUBSCRIBER(SUBSCRIBER_ID) ON
    UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY(APP_ID) REFERENCES APPLICATION(APPLICATION_ID) ON
    UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (REG_ID)
);

CREATE SEQUENCE API_LC_EVENT_SEQUENCE START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS API_LC_EVENT (
    EVENT_ID INTEGER DEFAULT nextval('api_lc_event_sequence'),
    API_ID INTEGER NOT NULL,
    PREVIOUS_STATE VARCHAR(50),
    NEW_STATE VARCHAR(50) NOT NULL,
    USER_ID VARCHAR(50) NOT NULL,
    ORGANIZATION VARCHAR(100) NOT NULL,
    EVENT_DATE TIMESTAMP NOT NULL,
    FOREIGN KEY(API_ID) REFERENCES API(API_ID) ON
    UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (EVENT_ID)
);

CREATE TABLE IF NOT EXISTS API_COMMENTS(
    COMMENT_ID VARCHAR(64) NOT NULL,
    COMMENT_TEXT VARCHAR(512),
    CREATED_BY VARCHAR(255),
    CREATED_TIME TIMESTAMP NOT NULL,
    UPDATED_TIME TIMESTAMP,
    API_ID INTEGER,
    PARENT_COMMENT_ID VARCHAR(64) DEFAULT NULL,
    ENTRY_POINT VARCHAR(20),
    CATEGORY VARCHAR(20) DEFAULT 'general',
    FOREIGN KEY(API_ID) REFERENCES API(API_ID) ON DELETE CASCADE,
    FOREIGN KEY(PARENT_COMMENT_ID) REFERENCES API_COMMENTS(COMMENT_ID),
    PRIMARY KEY(COMMENT_ID)
);

CREATE SEQUENCE API_RATINGS_SEQUENCE START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS API_RATINGS (
    RATING_ID VARCHAR(255) NOT NULL,
    API_ID INTEGER,
    RATING INTEGER,
    SUBSCRIBER_ID INTEGER,
    FOREIGN KEY(API_ID) REFERENCES API(API_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(SUBSCRIBER_ID) REFERENCES SUBSCRIBER(SUBSCRIBER_ID) ON
    UPDATE CASCADE ON DELETE RESTRICT,
    PRIMARY KEY (RATING_ID)
);

CREATE SEQUENCE BUSINESS_PLAN_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS BUSINESS_PLAN (
    POLICY_ID INTEGER DEFAULT NEXTVAL('BUSINESS_PLAN_SEQ'),
    NAME VARCHAR(512) NOT NULL,
    DISPLAY_NAME VARCHAR(512) NULL DEFAULT NULL,
    ORGANIZATION VARCHAR(100) NOT NULL,
    DESCRIPTION VARCHAR(1024) NULL DEFAULT NULL,
    QUOTA_TYPE VARCHAR(25) NOT NULL,
    QUOTA INTEGER NOT NULL,
    QUOTA_UNIT VARCHAR(10) NULL,
    UNIT_TIME INTEGER NOT NULL,
    TIME_UNIT VARCHAR(25) NOT NULL,
    RATE_LIMIT_COUNT INTEGER NULL DEFAULT NULL,
    RATE_LIMIT_TIME_UNIT VARCHAR(25) NULL DEFAULT NULL,
    IS_DEPLOYED BOOLEAN NOT NULL DEFAULT '0',
	CUSTOM_ATTRIBUTES BYTEA DEFAULT NULL,
    STOP_ON_QUOTA_REACH BOOLEAN NOT NULL DEFAULT '0',
    BILLING_PLAN VARCHAR(20) NOT NULL,
    UUID VARCHAR(256),
    MONETIZATION_PLAN VARCHAR(25) NULL DEFAULT NULL,
    FIXED_RATE VARCHAR(15) NULL DEFAULT NULL,
    BILLING_CYCLE VARCHAR(15) NULL DEFAULT NULL,
    PRICE_PER_REQUEST VARCHAR(15) NULL DEFAULT NULL,
    CURRENCY VARCHAR(15) NULL DEFAULT NULL,
    MAX_COMPLEXITY INTEGER NOT NULL DEFAULT 0,
    MAX_DEPTH INTEGER NOT NULL DEFAULT 0,
    CONNECTIONS_COUNT INTEGER NOT NULL DEFAULT 0,
    PRIMARY KEY(POLICY_ID),
    UNIQUE(NAME, ORGANIZATION),
    UNIQUE(UUID)
);

CREATE SEQUENCE APPLICATION_USAGE_PLAN_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS APPLICATION_USAGE_PLAN (
    POLICY_ID INTEGER DEFAULT NEXTVAL('APPLICATION_USAGE_PLAN_SEQ'),
    NAME VARCHAR(512) NOT NULL,
    DISPLAY_NAME VARCHAR(512) NULL DEFAULT NULL,
    ORGANIZATION VARCHAR(100) NOT NULL,
    DESCRIPTION VARCHAR(1024) NULL DEFAULT NULL,
    QUOTA_TYPE VARCHAR(25) NOT NULL,
    QUOTA INTEGER NOT NULL,
    QUOTA_UNIT VARCHAR(10) NULL DEFAULT NULL,
    UNIT_TIME INTEGER NOT NULL,
    TIME_UNIT VARCHAR(25) NOT NULL,
    IS_DEPLOYED BOOLEAN NOT NULL DEFAULT '0',
    CUSTOM_ATTRIBUTES BYTEA DEFAULT NULL,
    UUID VARCHAR(256),
    PRIMARY KEY(POLICY_ID),
    UNIQUE(NAME, ORGANIZATION),
    UNIQUE(UUID)
);

CREATE SEQUENCE THROTTLE_TIER_PERMISSIONS_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS THROTTLE_TIER_PERMISSIONS (
   THROTTLE_TIER_PERMISSIONS_ID INTEGER DEFAULT NEXTVAL('THROTTLE_TIER_PERMISSIONS_SEQ'),
   TIER VARCHAR(50) NULL,
   PERMISSIONS_TYPE VARCHAR(50) NULL,
   ROLES VARCHAR(512) NULL,
   ORGANIZATION VARCHAR(100) NULL,
   PRIMARY KEY(THROTTLE_TIER_PERMISSIONS_ID)
);

CREATE SEQUENCE BLOCK_CONDITION_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE BLOCK_CONDITION (
    CONDITION_ID INTEGER DEFAULT NEXTVAL('BLOCK_CONDITION_SEQ'),
    TYPE varchar(45) DEFAULT NULL,
    BLOCK_CONDITION varchar(512) DEFAULT NULL,
    ENABLED varchar(45) DEFAULT NULL,
    ORGANIZATION varchar(100) DEFAULT NULL,
    UUID VARCHAR(256),
    PRIMARY KEY (CONDITION_ID),
    UNIQUE (UUID)
);

CREATE TABLE APPLICATION_GROUP_MAPPING (
    APPLICATION_ID INTEGER NOT NULL,
    GROUP_ID VARCHAR(512) NOT NULL,
    ORGANIZATION VARCHAR(100) DEFAULT NULL,
    PRIMARY KEY (APPLICATION_ID,GROUP_ID,ORGANIZATION),
    FOREIGN KEY (APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS APPLICATION_ATTRIBUTES (
    APPLICATION_ID INTEGER NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    APP_ATTRIBUTE VARCHAR(1024) NOT NULL,
    ORGANIZATION VARCHAR(100) NOT NULL,
    PRIMARY KEY(APPLICATION_ID,NAME),
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON
    DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS API_CATEGORIES (
    UUID VARCHAR(50),
    NAME VARCHAR(255),
    DESCRIPTION VARCHAR(1024),
    ORGANIZATION VARCHAR(100),
    UNIQUE(NAME,ORGANIZATION),
    PRIMARY KEY(UUID)
);

CREATE TABLE IF NOT EXISTS KEY_MANAGER(
    UUID VARCHAR(50) NOT NULL,
    NAME VARCHAR(100) NULL,
    DISPLAY_NAME VARCHAR(100) NULL,
    DESCRIPTION VARCHAR(256) NULL,
    TYPE VARCHAR(45) NULL,
    CONFIGURATION BYTEA NULL,
    ENABLED BOOLEAN DEFAULT '1',
    ORGANIZATION VARCHAR(100) NULL,
    TOKEN_TYPE VARCHAR(45) NULL,
    EXTERNAL_REFERENCE_ID VARCHAR(100) NULL,
    PRIMARY KEY(UUID),
    UNIQUE(NAME,ORGANIZATION)
);

-- End of APK Tables --

-- Performance indexes start--

create index IDX_AI_CTX on API (CONTEXT);
create index IDX_AI_ORG on API (ORGANIZATION);
create index IDX_AKM_CK on APPLICATION_KEY_MAPPING (CONSUMER_KEY);
create index IDX_AUM_AI on API_URL_MAPPING (API_ID);
create index IDX_AUM_TT on API_URL_MAPPING (THROTTLING_TIER);
create index IDX_BP_QT on BUSINESS_PLAN (QUOTA_TYPE);
create index IDX_S_AITIAI on SUBSCRIPTION (API_ID,TIER_ID,APPLICATION_ID);
create index IDX_AUP_QT on APPLICATION_USAGE_PLAN (QUOTA_TYPE);
create index IDX_A_AT_CB on APPLICATION (APPLICATION_TIER,CREATED_BY);
create index IDX_SUB_APP_ID on SUBSCRIPTION (APPLICATION_ID, SUBSCRIPTION_ID);

-- Performance indexes end--

commit;

