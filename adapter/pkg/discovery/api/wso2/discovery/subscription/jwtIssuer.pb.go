//
//  Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: wso2/discovery/subscription/jwtIssuer.proto

package subscription

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// JWTIssuer data model
type JWTIssuer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          string            `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name             string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Organization     string            `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	Issuer           string            `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Certificate      *Certificate      `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`
	ConsumerKeyClaim string            `protobuf:"bytes,6,opt,name=consumerKeyClaim,proto3" json:"consumerKeyClaim,omitempty"`
	ScopesClaim      string            `protobuf:"bytes,7,opt,name=scopesClaim,proto3" json:"scopesClaim,omitempty"`
	ClaimMapping     map[string]string `protobuf:"bytes,8,rep,name=claimMapping,proto3" json:"claimMapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Environments     []string          `protobuf:"bytes,9,rep,name=environments,proto3" json:"environments,omitempty"`
}

func (x *JWTIssuer) Reset() {
	*x = JWTIssuer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTIssuer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTIssuer) ProtoMessage() {}

func (x *JWTIssuer) ProtoReflect() protoreflect.Message {
	mi := &file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTIssuer.ProtoReflect.Descriptor instead.
func (*JWTIssuer) Descriptor() ([]byte, []int) {
	return file_wso2_discovery_subscription_jwtIssuer_proto_rawDescGZIP(), []int{0}
}

func (x *JWTIssuer) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *JWTIssuer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JWTIssuer) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *JWTIssuer) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *JWTIssuer) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *JWTIssuer) GetConsumerKeyClaim() string {
	if x != nil {
		return x.ConsumerKeyClaim
	}
	return ""
}

func (x *JWTIssuer) GetScopesClaim() string {
	if x != nil {
		return x.ScopesClaim
	}
	return ""
}

func (x *JWTIssuer) GetClaimMapping() map[string]string {
	if x != nil {
		return x.ClaimMapping
	}
	return nil
}

func (x *JWTIssuer) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate string `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Jwks        *JWKS  `protobuf:"bytes,2,opt,name=jwks,proto3" json:"jwks,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_wso2_discovery_subscription_jwtIssuer_proto_rawDescGZIP(), []int{1}
}

func (x *Certificate) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *Certificate) GetJwks() *JWKS {
	if x != nil {
		return x.Jwks
	}
	return nil
}

type JWKS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Tls string `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *JWKS) Reset() {
	*x = JWKS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWKS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWKS) ProtoMessage() {}

func (x *JWKS) ProtoReflect() protoreflect.Message {
	mi := &file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWKS.ProtoReflect.Descriptor instead.
func (*JWKS) Descriptor() ([]byte, []int) {
	return file_wso2_discovery_subscription_jwtIssuer_proto_rawDescGZIP(), []int{2}
}

func (x *JWKS) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *JWKS) GetTls() string {
	if x != nil {
		return x.Tls
	}
	return ""
}

var File_wso2_discovery_subscription_jwtIssuer_proto protoreflect.FileDescriptor

var file_wso2_discovery_subscription_jwtIssuer_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x77, 0x73, 0x6f, 0x32, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x77,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x77,
	0x73, 0x6f, 0x32, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x03, 0x0a, 0x09, 0x4a,
	0x57, 0x54, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x73, 0x6f, 0x32, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x5c, 0x0a, 0x0c,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x73, 0x6f, 0x32, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4a, 0x57, 0x54, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3f,
	0x0a, 0x11, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x66, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x77, 0x73, 0x6f, 0x32, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x57, 0x4b,
	0x53, 0x52, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x22, 0x2a, 0x0a, 0x04, 0x4a, 0x57, 0x4b, 0x53, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x6c, 0x73, 0x42, 0x91, 0x01, 0x0a, 0x2c, 0x6f, 0x72, 0x67, 0x2e, 0x77, 0x73, 0x6f, 0x32,
	0x2e, 0x61, 0x70, 0x6b, 0x2e, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x4a, 0x57, 0x54, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f,
	0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x77,
	0x73, 0x6f, 0x32, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wso2_discovery_subscription_jwtIssuer_proto_rawDescOnce sync.Once
	file_wso2_discovery_subscription_jwtIssuer_proto_rawDescData = file_wso2_discovery_subscription_jwtIssuer_proto_rawDesc
)

func file_wso2_discovery_subscription_jwtIssuer_proto_rawDescGZIP() []byte {
	file_wso2_discovery_subscription_jwtIssuer_proto_rawDescOnce.Do(func() {
		file_wso2_discovery_subscription_jwtIssuer_proto_rawDescData = protoimpl.X.CompressGZIP(file_wso2_discovery_subscription_jwtIssuer_proto_rawDescData)
	})
	return file_wso2_discovery_subscription_jwtIssuer_proto_rawDescData
}

var file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_wso2_discovery_subscription_jwtIssuer_proto_goTypes = []interface{}{
	(*JWTIssuer)(nil),   // 0: wso2.discovery.subscription.JWTIssuer
	(*Certificate)(nil), // 1: wso2.discovery.subscription.Certificate
	(*JWKS)(nil),        // 2: wso2.discovery.subscription.JWKS
	nil,                 // 3: wso2.discovery.subscription.JWTIssuer.ClaimMappingEntry
}
var file_wso2_discovery_subscription_jwtIssuer_proto_depIdxs = []int32{
	1, // 0: wso2.discovery.subscription.JWTIssuer.certificate:type_name -> wso2.discovery.subscription.Certificate
	3, // 1: wso2.discovery.subscription.JWTIssuer.claimMapping:type_name -> wso2.discovery.subscription.JWTIssuer.ClaimMappingEntry
	2, // 2: wso2.discovery.subscription.Certificate.jwks:type_name -> wso2.discovery.subscription.JWKS
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_wso2_discovery_subscription_jwtIssuer_proto_init() }
func file_wso2_discovery_subscription_jwtIssuer_proto_init() {
	if File_wso2_discovery_subscription_jwtIssuer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTIssuer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWKS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wso2_discovery_subscription_jwtIssuer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wso2_discovery_subscription_jwtIssuer_proto_goTypes,
		DependencyIndexes: file_wso2_discovery_subscription_jwtIssuer_proto_depIdxs,
		MessageInfos:      file_wso2_discovery_subscription_jwtIssuer_proto_msgTypes,
	}.Build()
	File_wso2_discovery_subscription_jwtIssuer_proto = out.File
	file_wso2_discovery_subscription_jwtIssuer_proto_rawDesc = nil
	file_wso2_discovery_subscription_jwtIssuer_proto_goTypes = nil
	file_wso2_discovery_subscription_jwtIssuer_proto_depIdxs = nil
}
