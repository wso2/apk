//go:build !ignore_autogenerated

/*
 *  Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

// Code generated by controller-gen. DO NOT EDIT.

package synchronizer

import (
	"github.com/wso2/apk/common-go-libs/apis/dp/v1alpha1"
	"github.com/wso2/apk/common-go-libs/apis/dp/v1alpha2"
	"github.com/wso2/apk/common-go-libs/apis/dp/v1alpha3"
	"sigs.k8s.io/gateway-api/apis/v1"
	apisv1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIState) DeepCopyInto(out *APIState) {
	*out = *in
	if in.APIDefinition != nil {
		in, out := &in.APIDefinition, &out.APIDefinition
		*out = new(v1alpha3.API)
		(*in).DeepCopyInto(*out)
	}
	if in.ProdHTTPRoute != nil {
		in, out := &in.ProdHTTPRoute, &out.ProdHTTPRoute
		*out = new(HTTPRouteState)
		(*in).DeepCopyInto(*out)
	}
	if in.SandHTTPRoute != nil {
		in, out := &in.SandHTTPRoute, &out.SandHTTPRoute
		*out = new(HTTPRouteState)
		(*in).DeepCopyInto(*out)
	}
	if in.ProdGQLRoute != nil {
		in, out := &in.ProdGQLRoute, &out.ProdGQLRoute
		*out = new(GQLRouteState)
		(*in).DeepCopyInto(*out)
	}
	if in.SandGQLRoute != nil {
		in, out := &in.SandGQLRoute, &out.SandGQLRoute
		*out = new(GQLRouteState)
		(*in).DeepCopyInto(*out)
	}
	if in.ProdGRPCRoute != nil {
		in, out := &in.ProdGRPCRoute, &out.ProdGRPCRoute
		*out = new(GRPCRouteState)
		(*in).DeepCopyInto(*out)
	}
	if in.SandGRPCRoute != nil {
		in, out := &in.SandGRPCRoute, &out.SandGRPCRoute
		*out = new(GRPCRouteState)
		(*in).DeepCopyInto(*out)
	}
	if in.Authentications != nil {
		in, out := &in.Authentications, &out.Authentications
		*out = make(map[string]v1alpha2.Authentication, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.RateLimitPolicies != nil {
		in, out := &in.RateLimitPolicies, &out.RateLimitPolicies
		*out = make(map[string]v1alpha3.RateLimitPolicy, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.ResourceAuthentications != nil {
		in, out := &in.ResourceAuthentications, &out.ResourceAuthentications
		*out = make(map[string]v1alpha2.Authentication, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.ResourceRateLimitPolicies != nil {
		in, out := &in.ResourceRateLimitPolicies, &out.ResourceRateLimitPolicies
		*out = make(map[string]v1alpha3.RateLimitPolicy, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.ResourceAPIPolicies != nil {
		in, out := &in.ResourceAPIPolicies, &out.ResourceAPIPolicies
		*out = make(map[string]v1alpha3.APIPolicy, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.APIPolicies != nil {
		in, out := &in.APIPolicies, &out.APIPolicies
		*out = make(map[string]v1alpha3.APIPolicy, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.AIProvider != nil {
		in, out := &in.AIProvider, &out.AIProvider
		*out = new(v1alpha3.AIProvider)
		(*in).DeepCopyInto(*out)
	}
	if in.InterceptorServiceMapping != nil {
		in, out := &in.InterceptorServiceMapping, &out.InterceptorServiceMapping
		*out = make(map[string]v1alpha1.InterceptorService, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.BackendJWTMapping != nil {
		in, out := &in.BackendJWTMapping, &out.BackendJWTMapping
		*out = make(map[string]v1alpha1.BackendJWT, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.APIDefinitionFile != nil {
		in, out := &in.APIDefinitionFile, &out.APIDefinitionFile
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	if in.MutualSSL != nil {
		in, out := &in.MutualSSL, &out.MutualSSL
		*out = new(v1alpha2.MutualSSL)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIState.
func (in *APIState) DeepCopy() *APIState {
	if in == nil {
		return nil
	}
	out := new(APIState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GQLRouteState) DeepCopyInto(out *GQLRouteState) {
	*out = *in
	if in.GQLRouteCombined != nil {
		in, out := &in.GQLRouteCombined, &out.GQLRouteCombined
		*out = new(v1alpha2.GQLRoute)
		(*in).DeepCopyInto(*out)
	}
	if in.GQLRoutePartitions != nil {
		in, out := &in.GQLRoutePartitions, &out.GQLRoutePartitions
		*out = make(map[string]*v1alpha2.GQLRoute, len(*in))
		for key, val := range *in {
			var outVal *v1alpha2.GQLRoute
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(v1alpha2.GQLRoute)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.BackendMapping != nil {
		in, out := &in.BackendMapping, &out.BackendMapping
		*out = make(map[string]*v1alpha2.ResolvedBackend, len(*in))
		for key, val := range *in {
			var outVal *v1alpha2.ResolvedBackend
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(v1alpha2.ResolvedBackend)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make(map[string]v1alpha1.Scope, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GQLRouteState.
func (in *GQLRouteState) DeepCopy() *GQLRouteState {
	if in == nil {
		return nil
	}
	out := new(GQLRouteState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GRPCRouteState) DeepCopyInto(out *GRPCRouteState) {
	*out = *in
	if in.GRPCRouteCombined != nil {
		in, out := &in.GRPCRouteCombined, &out.GRPCRouteCombined
		*out = new(apisv1alpha2.GRPCRoute)
		(*in).DeepCopyInto(*out)
	}
	if in.GRPCRoutePartitions != nil {
		in, out := &in.GRPCRoutePartitions, &out.GRPCRoutePartitions
		*out = make(map[string]*apisv1alpha2.GRPCRoute, len(*in))
		for key, val := range *in {
			var outVal *apisv1alpha2.GRPCRoute
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(apisv1alpha2.GRPCRoute)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.BackendMapping != nil {
		in, out := &in.BackendMapping, &out.BackendMapping
		*out = make(map[string]*v1alpha2.ResolvedBackend, len(*in))
		for key, val := range *in {
			var outVal *v1alpha2.ResolvedBackend
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(v1alpha2.ResolvedBackend)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make(map[string]v1alpha1.Scope, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GRPCRouteState.
func (in *GRPCRouteState) DeepCopy() *GRPCRouteState {
	if in == nil {
		return nil
	}
	out := new(GRPCRouteState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayState) DeepCopyInto(out *GatewayState) {
	*out = *in
	if in.GatewayDefinition != nil {
		in, out := &in.GatewayDefinition, &out.GatewayDefinition
		*out = new(v1.Gateway)
		(*in).DeepCopyInto(*out)
	}
	if in.GatewayStateData != nil {
		in, out := &in.GatewayStateData, &out.GatewayStateData
		*out = new(GatewayStateData)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayState.
func (in *GatewayState) DeepCopy() *GatewayState {
	if in == nil {
		return nil
	}
	out := new(GatewayState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayStateData) DeepCopyInto(out *GatewayStateData) {
	*out = *in
	if in.GatewayResolvedListenerCerts != nil {
		in, out := &in.GatewayResolvedListenerCerts, &out.GatewayResolvedListenerCerts
		*out = make(map[string]map[string][]byte, len(*in))
		for key, val := range *in {
			var outVal map[string][]byte
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(map[string][]byte, len(*in))
				for key, val := range *in {
					var outVal []byte
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = make([]byte, len(*in))
						copy(*out, *in)
					}
					(*out)[key] = outVal
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.GatewayAPIPolicies != nil {
		in, out := &in.GatewayAPIPolicies, &out.GatewayAPIPolicies
		*out = make(map[string]v1alpha3.APIPolicy, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.GatewayBackendMapping != nil {
		in, out := &in.GatewayBackendMapping, &out.GatewayBackendMapping
		*out = make(map[string]*v1alpha2.ResolvedBackend, len(*in))
		for key, val := range *in {
			var outVal *v1alpha2.ResolvedBackend
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(v1alpha2.ResolvedBackend)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.GatewayInterceptorServiceMapping != nil {
		in, out := &in.GatewayInterceptorServiceMapping, &out.GatewayInterceptorServiceMapping
		*out = make(map[string]v1alpha1.InterceptorService, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.GatewayCustomRateLimitPolicies != nil {
		in, out := &in.GatewayCustomRateLimitPolicies, &out.GatewayCustomRateLimitPolicies
		*out = make(map[string]*v1alpha3.RateLimitPolicy, len(*in))
		for key, val := range *in {
			var outVal *v1alpha3.RateLimitPolicy
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(v1alpha3.RateLimitPolicy)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayStateData.
func (in *GatewayStateData) DeepCopy() *GatewayStateData {
	if in == nil {
		return nil
	}
	out := new(GatewayStateData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPRouteState) DeepCopyInto(out *HTTPRouteState) {
	*out = *in
	if in.HTTPRouteCombined != nil {
		in, out := &in.HTTPRouteCombined, &out.HTTPRouteCombined
		*out = new(v1.HTTPRoute)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPRoutePartitions != nil {
		in, out := &in.HTTPRoutePartitions, &out.HTTPRoutePartitions
		*out = make(map[string]*v1.HTTPRoute, len(*in))
		for key, val := range *in {
			var outVal *v1.HTTPRoute
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(v1.HTTPRoute)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.BackendMapping != nil {
		in, out := &in.BackendMapping, &out.BackendMapping
		*out = make(map[string]*v1alpha2.ResolvedBackend, len(*in))
		for key, val := range *in {
			var outVal *v1alpha2.ResolvedBackend
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(v1alpha2.ResolvedBackend)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make(map[string]v1alpha1.Scope, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.RuleIdxToAiRatelimitPolicyMapping != nil {
		in, out := &in.RuleIdxToAiRatelimitPolicyMapping, &out.RuleIdxToAiRatelimitPolicyMapping
		*out = make(map[int]*v1alpha3.AIRateLimitPolicy, len(*in))
		for key, val := range *in {
			var outVal *v1alpha3.AIRateLimitPolicy
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(v1alpha3.AIRateLimitPolicy)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPRouteState.
func (in *HTTPRouteState) DeepCopy() *HTTPRouteState {
	if in == nil {
		return nil
	}
	out := new(HTTPRouteState)
	in.DeepCopyInto(out)
	return out
}
