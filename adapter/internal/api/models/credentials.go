// Code generated by go-swagger; DO NOT EDIT.

/*
 *  Copyright (c) 2022, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Credentials credentials
//
// swagger:model Credentials
type Credentials struct {

	// Password of the microgateway REST API user
	// Required: true
	// Max Length: 100
	// Pattern: ^[a-zA-Z0-9_~.@-]*$
	Password *string `json:"password"`

	// Username of the microgateway REST API user
	// Required: true
	// Max Length: 100
	// Pattern: ^[a-zA-Z0-9_~.@-]*$
	Username *string `json:"username"`
}

// Validate validates this credentials
func (m *Credentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Credentials) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 100); err != nil {
		return err
	}

	if err := validate.Pattern("password", "body", *m.Password, `^[a-zA-Z0-9_~.@-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Credentials) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 100); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", *m.Username, `^[a-zA-Z0-9_~.@-]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this credentials based on context it is used
func (m *Credentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Credentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Credentials) UnmarshalBinary(b []byte) error {
	var res Credentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
